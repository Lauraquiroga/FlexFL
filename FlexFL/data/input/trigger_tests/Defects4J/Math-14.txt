public void testLargeSample() {
        Random randomizer = new Random(0x5551480dca5b369bl);
        double maxError = 0;
        for (int degree = 0; degree < 10; ++degree) {
            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);

            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
            for (int i = 0; i < 40000; ++i) {
                double x = -1.0 + i / 20000.0;
                fitter.addObservedPoint(1.0, x,
                                        p.value(x) + 0.1 * randomizer.nextGaussian());
            }

            final double[] init = new double[degree + 1];
            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
The last line shown above failed with the following stack trace.
java.lang.OutOfMemoryError: Java heap space
	at org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)
	at org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)
	at org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)
	at org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)
	at org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)
	at org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)
	at org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)
	at org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)