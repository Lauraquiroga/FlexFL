public void testStringJoinAdd() {
    fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
    fold("x = [].join(',')", "x = \"\"");
    fold("x = ['a'].join(',')", "x = \"a\"");
    fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
    fold("x = ['a', foo, 'b', 'c'].join(',')", "x = [\"a\",foo,\"b,c\"].join(\",\")");
    fold("x = [foo, 'a', 'b', 'c'].join(',')", "x = [foo,\"a,b,c\"].join(\",\")");
    fold("x = ['a', 'b', 'c', foo].join(',')", "x = [\"a,b,c\",foo].join(\",\")");

    // Works with numbers
    fold("x = ['a=', 5].join('')", "x = \"a=5\"");
    fold("x = ['a', '5'].join(7)", "x = \"a75\"");

    // Works on boolean
    fold("x = ['a=', false].join('')", "x = \"a=false\"");
    fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
    fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");

    // Only optimize if it's a size win.
    fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");
    
    // TODO(user): Its possible to fold this better.
    foldSame("x = ['', foo].join(',')");
The last line shown above failed with the following stack trace.
junit.framework.AssertionFailedError: 
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:758)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:278)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:247)
	at com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:235)
	at com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:462)
	at com.google.javascript.jscomp.FoldConstantsTest.foldSame(FoldConstantsTest.java:48)
	at com.google.javascript.jscomp.FoldConstantsTest.testStringJoinAdd(FoldConstantsTest.java:646)