{
    "Math-8": [
        "org.apache.commons.math3.distribution.DiscreteDistribution.sample(int)"
    ],
    "JxPath-22": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(Node)"
    ],
    "Closure-127": [
        "com.google.javascript.jscomp.UnreachableCodeElimination.EliminationPass.tryRemoveUnconditionalBranching(Node)"
    ],
    "Compress-43": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)"
    ],
    "Time-8": [
        "org.joda.time.DateTimeZone.forOffsetHoursMinutes(int,int)"
    ],
    "Closure-30": [
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables.process(Node,Node)",
        "com.google.javascript.jscomp.MustBeReachingVariableDef.computeDependence(Definition,Node)",
        "com.google.javascript.jscomp.MustBeReachingVariableDef.dependsOnOuterScopeVars(String,Node)"
    ],
    "Math-37": [
        "org.apache.commons.math.complex.Complex.tan()",
        "org.apache.commons.math.complex.Complex.tanh()"
    ],
    "Csv-15": [
        "org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)"
    ],
    "Closure-37": [
        "com.google.javascript.jscomp.NodeTraversal.traverseFunction(Node,Node)",
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(FunctionNode)"
    ],
    "Math-74": [
        "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
    ],
    "JacksonCore-18": [
        "com.fasterxml.jackson.core.base.GeneratorBase._asString(BigDecimal)",
        "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigDecimal)",
        "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigDecimal)"
    ],
    "Math-30": [
        "org.apache.commons.math3.stat.inference.MannWhitneyUTest.calculateAsymptoticPValue(double,int,int)"
    ],
    "Mockito-23": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(InvocationOnMock)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.recordDeepStubMock(Object,InvocationContainerImpl)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(GenericMetadataSupport)"
    ],
    "Jsoup-39": [
        "org.jsoup.helper.DataUtil.parseByteData(ByteBuffer,String,String,Parser)"
    ],
    "JacksonDatabind-112": [
        "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.createContextual(DeserializationContext,BeanProperty)"
    ],
    "Closure-106": [
        "com.google.javascript.jscomp.GlobalNamespace.Name.canCollapseUnannotatedChildNames()",
        "com.google.javascript.rhino.JSDocInfoBuilder.recordBlockDescription(String)"
    ],
    "Gson-11": [],
    "JacksonDatabind-80": [
        "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByClass(MapperConfig<?>,AnnotatedMember,JavaType)",
        "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByTypeId(MapperConfig<?>,AnnotatedMember,JavaType)"
    ],
    "Closure-2": [
        "com.google.javascript.jscomp.TypeCheck.checkInterfaceConflictProperties(NodeTraversal,Node,String,HashMap<String,ObjectType>,HashMap<String,ObjectType>,ObjectType)"
    ],
    "JacksonCore-3": [
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(IOContext,int,InputStream,ObjectCodec,BytesToNameCanonicalizer,byte[],int,int,boolean)"
    ],
    "Closure-164": [
        "com.google.javascript.rhino.jstype.ArrowType.isSubtype(JSType)"
    ],
    "Closure-158": [
        "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJscompError(List<String>)",
        "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJscompOff(List<String>)",
        "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJscompWarning(List<String>)",
        "com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions(CompilerOptions)",
        "com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags(String[],PrintStream)",
        "com.google.javascript.jscomp.CommandLineRunner.processFlagFile(PrintStream)",
        "com.google.javascript.jscomp.DiagnosticGroups.setWarningLevels(CompilerOptions,List<String>,CheckLevel)"
    ],
    "Math-78": [
        "org.apache.commons.math.ode.events.EventState.evaluateStep(StepInterpolator)"
    ],
    "Lang-56": [],
    "Jsoup-81": [
        "org.jsoup.helper.DataUtil.parseInputStream(InputStream,String,String,Parser)"
    ],
    "Closure-61": [
        "com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(Node,AbstractCompiler)"
    ],
    "Closure-100": [
        "com.google.javascript.jscomp.CheckGlobalThis.shouldReportThis(Node,Node)",
        "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(NodeTraversal,Node,Node)"
    ],
    "Lang-39": [
        "org.apache.commons.lang3.StringUtils.replaceEach(String,String[],String[],boolean,int)"
    ],
    "Closure-111": [],
    "Math-65": [
        "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.getChiSquare()",
        "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.getRMS()"
    ],
    "Closure-24": [
        "com.google.javascript.jscomp.ScopedAliases.Traversal.findAliases(NodeTraversal)"
    ],
    "Collections-27": [],
    "Gson-18": [],
    "Time-15": [
        "org.joda.time.field.FieldUtils.safeMultiply(long,int)"
    ],
    "Lang-47": [
        "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadLeft(Object,int,char)",
        "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(Object,int,char)"
    ],
    "Math-2": [
        "org.apache.commons.math3.distribution.HypergeometricDistribution.getNumericalMean()"
    ],
    "Closure-49": [
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.enterScope(NodeTraversal)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.shouldTraverse(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.visit(NodeTraversal,Node,Node)"
    ],
    "Math-31": [
        "org.apache.commons.math3.util.ContinuedFraction.evaluate(double,double,int)"
    ],
    "Jsoup-66": [
        "org.jsoup.nodes.Element.NodeList.NodeList(int)",
        "org.jsoup.nodes.Element.NodeList.onContentsChanged()",
        "org.jsoup.nodes.Element.doClone(Node)",
        "org.jsoup.nodes.Element.ensureChildNodes()"
    ],
    "Math-94": [
        "org.apache.commons.math.util.MathUtils.gcd(int,int)"
    ],
    "Cli-30": [
        "org.apache.commons.cli.DefaultParser.handleProperties(Properties)",
        "org.apache.commons.cli.Parser.processProperties(Properties)"
    ],
    "Gson-14": [],
    "JacksonDatabind-25": [
        "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.modifyTypeByAnnotation(DeserializationContext,Annotated,T)",
        "com.fasterxml.jackson.databind.deser.DeserializerCache.modifyTypeByAnnotation(DeserializationContext,Annotated,JavaType)",
        "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(DeserializationContext,String)",
        "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping(DeserializationConfig,JavaType)"
    ],
    "JacksonDatabind-18": [
        "com.fasterxml.jackson.databind.MappingIterator.MappingIterator(JavaType,JsonParser,DeserializationContext,JsonDeserializer<?>,boolean,Object)",
        "com.fasterxml.jackson.databind.MappingIterator.close()",
        "com.fasterxml.jackson.databind.MappingIterator.hasNextValue()",
        "com.fasterxml.jackson.databind.MappingIterator.nextValue()"
    ],
    "JacksonDatabind-60": [
        "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)"
    ],
    "Mockito-30": [
        "org.mockito.exceptions.Reporter.smartNullPointerException(Location)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.ThrowingInterceptor.intercept(Object,Method,Object[],MethodProxy)"
    ],
    "JacksonCore-4": [
        "com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment()"
    ],
    "Mockito-29": [
        "org.mockito.internal.matchers.Same.describeTo(Description)"
    ],
    "Mockito-24": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.answer(InvocationOnMock)"
    ],
    "JacksonCore-19": [
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)"
    ],
    "Compress-2": [
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read()",
        "org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)"
    ],
    "Jsoup-73": [
        "org.jsoup.helper.W3CDom.W3CBuilder.W3CBuilder(Document)",
        "org.jsoup.helper.W3CDom.W3CBuilder.head(org.jsoup.nodes.Node,int)",
        "org.jsoup.helper.W3CDom.W3CBuilder.tail(org.jsoup.nodes.Node,int)",
        "org.jsoup.helper.W3CDom.W3CBuilder.updateNamespaces(org.jsoup.nodes.Element)"
    ],
    "JxPath-18": [
        "org.apache.commons.jxpath.ri.axes.AttributeContext.nextNode()"
    ],
    "Lang-28": [
        "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)"
    ],
    "Chart-12": [
        "org.jfree.chart.plot.MultiplePiePlot.MultiplePiePlot(CategoryDataset)"
    ],
    "JacksonCore-8": [
        "com.fasterxml.jackson.core.util.TextBuffer.getTextBuffer()"
    ],
    "Time-7": [
        "org.joda.time.format.DateTimeFormatter.parseInto(ReadWritableInstant,String,int)"
    ],
    "Closure-86": [
        "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Node,Predicate<Node>)"
    ],
    "JacksonDatabind-53": [
        "com.fasterxml.jackson.databind.type.TypeFactory._fromClass(ClassStack,Class<?>,TypeBindings)",
        "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(JavaType,Class<?>)"
    ],
    "JacksonDatabind-106": [
        "com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue()",
        "com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue()"
    ],
    "Jsoup-54": [
        "org.jsoup.helper.W3CDom.W3CBuilder.copyAttributes(org.jsoup.nodes.Node,Element)"
    ],
    "Jsoup-75": [
        "org.jsoup.nodes.Attributes.html(Appendable,Document.OutputSettings)"
    ],
    "Lang-53": [
        "org.apache.commons.lang.time.DateUtils.modify(Calendar,int,boolean)"
    ],
    "JacksonCore-9": [
        "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()",
        "com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(String)",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString()",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(String)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(String)"
    ],
    "Mockito-26": [],
    "Cli-33": [
        "org.apache.commons.cli.HelpFormatter.printWrapped(PrintWriter,int,int,String)"
    ],
    "Closure-175": [
        "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceDirectly(Node,Node)",
        "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceToFunction(NodeTraversal,Node,Node,Set<String>,InliningMode,boolean,boolean)"
    ],
    "Closure-102": [
        "com.google.javascript.jscomp.Normalize.process(Node,Node)"
    ],
    "JacksonDatabind-41": [
        "com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type,Class<?>)",
        "com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type,JavaType)"
    ],
    "JacksonDatabind-104": [
        "com.fasterxml.jackson.databind.util.StdDateFormat._format(TimeZone,Locale,Date,StringBuffer)",
        "com.fasterxml.jackson.databind.util.StdDateFormat.pad4(StringBuffer,int)"
    ],
    "Closure-155": [
        "com.google.javascript.jscomp.InlineVariables.InliningBehavior.doInlinesForScope(NodeTraversal,Map<Var,ReferenceCollection>)",
        "com.google.javascript.jscomp.InlineVariables.InliningBehavior.inlineNonConstants(Var,ReferenceCollection)",
        "com.google.javascript.jscomp.ReferenceCollectingCallback.visit(NodeTraversal,Node,Node)"
    ],
    "Compress-22": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream,boolean)",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA()",
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC()"
    ],
    "Lang-62": [
        "org.apache.commons.lang.Entities.unescape(String)",
        "org.apache.commons.lang.Entities.unescape(Writer,String)"
    ],
    "Compress-35": [
        "org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])"
    ],
    "JacksonDatabind-46": [
        "com.fasterxml.jackson.databind.type.ReferenceType.getGenericSignature(StringBuilder)"
    ],
    "Math-69": [
        "org.apache.commons.math.stat.correlation.PearsonsCorrelation.getCorrelationPValues()"
    ],
    "JacksonDatabind-7": [
        "com.fasterxml.jackson.databind.util.TokenBuffer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Mockito-13": [
        "org.mockito.internal.MockHandler.handle(Invocation)"
    ],
    "JacksonDatabind-20": [
        "com.fasterxml.jackson.databind.node.ObjectNode.setAll(Map<String,? extends JsonNode>)"
    ],
    "Math-81": [
        "org.apache.commons.math.linear.EigenDecompositionImpl.computeGershgorinCircles()",
        "org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(int,int,int)",
        "org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(int)"
    ],
    "Closure-64": [
        "com.google.javascript.jscomp.Compiler.toSource(CodeBuilder,int,Node)",
        "com.google.javascript.jscomp.Compiler.toSource(Node)",
        "com.google.javascript.jscomp.Compiler.toSource(Node,SourceMap)"
    ],
    "Lang-4": [
        "org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(CharSequence[])",
        "org.apache.commons.lang3.text.translate.LookupTranslator.translate(CharSequence,int,Writer)"
    ],
    "Mockito-16": [
        "org.mockito.Mockito.mock(Class<T>,MockSettings)",
        "org.mockito.Mockito.spy(T)",
        "org.mockito.internal.MockitoCore.mock(Class<T>,MockSettings)",
        "org.mockito.internal.MockitoCore.mock(Class<T>,MockSettings,boolean)"
    ],
    "Math-25": [
        "org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser.guessAOmega()"
    ],
    "Gson-4": [
        "com.google.gson.stream.JsonReader.doPeek()",
        "com.google.gson.stream.JsonWriter.beforeValue(boolean)",
        "com.google.gson.stream.JsonWriter.jsonValue(String)",
        "com.google.gson.stream.JsonWriter.nullValue()",
        "com.google.gson.stream.JsonWriter.open(int,String)",
        "com.google.gson.stream.JsonWriter.value(Number)",
        "com.google.gson.stream.JsonWriter.value(String)",
        "com.google.gson.stream.JsonWriter.value(boolean)",
        "com.google.gson.stream.JsonWriter.value(double)",
        "com.google.gson.stream.JsonWriter.value(long)"
    ],
    "Closure-167": [
        "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseAndOrNotShortCircuiting(Node,Node,FlowScope,boolean)",
        "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseEquality(Node,Node,FlowScope,Function<TypePair,TypePair>)",
        "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.caseNameOrGetProp(Node,FlowScope,boolean)",
        "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictName(FlowScope,Node,JSType,JSType)",
        "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.maybeRestrictTwoNames(FlowScope,Node,boolean,JSType,Node,boolean,JSType)",
        "com.google.javascript.rhino.jstype.JSType.getRestrictedTypeGivenToBooleanOutcome(boolean)"
    ],
    "Cli-29": [
        "org.apache.commons.cli.Util.stripLeadingAndTrailingQuotes(String)"
    ],
    "Lang-32": [
        "org.apache.commons.lang3.builder.HashCodeBuilder.isRegistered(Object)",
        "org.apache.commons.lang3.builder.HashCodeBuilder.register(Object)",
        "org.apache.commons.lang3.builder.HashCodeBuilder.unregister(Object)"
    ],
    "Jsoup-32": [
        "org.jsoup.nodes.Element.clone()"
    ],
    "JacksonDatabind-108": [
        "com.fasterxml.jackson.databind.ObjectReader.readTree(JsonParser)"
    ],
    "Closure-144": [
        "com.google.javascript.jscomp.FunctionTypeBuilder.buildAndRegister()",
        "com.google.javascript.jscomp.FunctionTypeBuilder.inferReturnType(JSDocInfo)",
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.getFunctionType(String,Node,JSDocInfo,Node)",
        "com.google.javascript.rhino.jstype.FunctionType.cloneWithNewReturnType(JSType,boolean)"
    ],
    "Closure-118": [
        "com.google.javascript.jscomp.DisambiguateProperties.FindRenameableProperties.handleObjectLit(NodeTraversal,Node)"
    ],
    "Jsoup-15": [],
    "Compress-10": [
        "org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)"
    ],
    "Closure-159": [
        "com.google.javascript.jscomp.InlineFunctions.findCalledFunctions(Node,Set<String>)"
    ],
    "Math-60": [
        "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)"
    ],
    "Compress-17": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Jsoup-18": [
        "org.jsoup.parser.CharacterReader.CharacterReader(String)",
        "org.jsoup.parser.CharacterReader.consumeToEnd()"
    ],
    "JacksonDatabind-100": [
        "com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue(Base64Variant)"
    ],
    "Closure-140": [
        "com.google.javascript.jscomp.Compiler.getNodeForCodeInsertion(JSModule)",
        "com.google.javascript.jscomp.Compiler.init(JSSourceFile[],JSModule[],CompilerOptions)"
    ],
    "Math-51": [
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver.doSolve()"
    ],
    "JacksonCore-25": [
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[])"
    ],
    "JacksonDatabind-85": [
        "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.createContextual(SerializerProvider,BeanProperty)"
    ],
    "Jsoup-90": [
        "org.jsoup.helper.HttpConnection.Base.looksLikeUtf8(byte[])"
    ],
    "Time-16": [
        "org.joda.time.format.DateTimeFormatter.parseInto(ReadWritableInstant,String,int)"
    ],
    "Closure-156": [
        "com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(Name,String)",
        "com.google.javascript.jscomp.CollapseProperties.updateFunctionDeclarationAtFunctionNode(Name)",
        "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(Name,String)",
        "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(Name,String)",
        "com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtVarNode(Name)"
    ],
    "Mockito-12": [
        "org.mockito.internal.util.reflection.GenericMaster.getGenericType(Field)"
    ],
    "Closure-173": [
        "com.google.javascript.jscomp.CodeGenerator.add(Node,Context)",
        "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.optimizeSubtree(Node)"
    ],
    "Jsoup-63": [
        "org.jsoup.parser.HtmlTreeBuilder.insertEmpty(Token.StartTag)",
        "org.jsoup.parser.Tokeniser.acknowledgeSelfClosingFlag()",
        "org.jsoup.parser.Tokeniser.emit(Token)",
        "org.jsoup.parser.Tokeniser.read()"
    ],
    "Closure-103": [
        "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(Node)",
        "com.google.javascript.jscomp.DisambiguateProperties.JSTypeSystem.getTypeWithProperty(String,JSType)"
    ],
    "Closure-135": [
        "com.google.javascript.jscomp.DevirtualizePrototypeMethods.replaceReferencesToThis(Node,String)",
        "com.google.javascript.rhino.jstype.FunctionType.defineProperty(String,JSType,boolean,boolean)"
    ],
    "Codec-7": [
        "org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])"
    ],
    "JacksonDatabind-94": [
        "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext,JavaType)"
    ],
    "Jsoup-88": [
        "org.jsoup.nodes.Attribute.getValue()"
    ],
    "JacksonDatabind-27": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(JsonParser,DeserializationContext)"
    ],
    "JacksonDatabind-31": [
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean(boolean)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNull()",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(BigDecimal)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(BigInteger)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(String)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(double)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(float)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(int)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(long)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(short)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeObject(Object)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(String)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(String,int,int)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(char[],int,int)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeString(SerializableString)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeString(String)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeTree(TreeNode)"
    ],
    "Closure-139": [
        "com.google.javascript.jscomp.Normalize.DuplicateDeclarationHandler.onRedeclaration(Scope,String,Node,Node,Node,Node)",
        "com.google.javascript.jscomp.Normalize.NormalizeStatements.visit(NodeTraversal,Node,Node)"
    ],
    "Closure-80": [
        "com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(Node,Predicate<Node>)",
        "com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(Node)"
    ],
    "Compress-37": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream)"
    ],
    "Math-44": [
        "org.apache.commons.math.ode.AbstractIntegrator.acceptStep(AbstractStepInterpolator,double[],double[],double)"
    ],
    "JacksonDatabind-75": [
        "com.fasterxml.jackson.databind.ser.std.EnumSerializer._isShapeWrittenUsingIndex(Class<?>,JsonFormat.Value,boolean)",
        "com.fasterxml.jackson.databind.ser.std.EnumSerializer.construct(Class<?>,SerializationConfig,BeanDescription,JsonFormat.Value)",
        "com.fasterxml.jackson.databind.ser.std.EnumSerializer.createContextual(SerializerProvider,BeanProperty)"
    ],
    "Closure-5": [
        "com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.isInlinableObject(List<Reference>)"
    ],
    "JacksonCore-6": [
        "com.fasterxml.jackson.core.JsonPointer._parseIndex(String)"
    ],
    "Closure-137": [
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.getNameSuffix(String,int)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalNameInternal(String,int)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenameInverter.visit(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer.addDeclaredName(String)",
        "com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer.addDeclaredName(String)",
        "com.google.javascript.jscomp.Normalize.process(Node,Node)"
    ],
    "Lang-48": [
        "org.apache.commons.lang.builder.EqualsBuilder.append(Object,Object)"
    ],
    "Gson-1": [
        "com.google.gson.TypeInfoFactory.getActualType(Type,Type,Class<?>)"
    ],
    "Gson-16": [],
    "Lang-65": [
        "org.apache.commons.lang.time.DateUtils.modify(Calendar,int,boolean)"
    ],
    "Jsoup-52": [
        "org.jsoup.helper.DataUtil.parseByteData(ByteBuffer,String,String,Parser)",
        "org.jsoup.nodes.XmlDeclaration.getWholeDeclaration()",
        "org.jsoup.nodes.XmlDeclaration.outerHtmlHead(Appendable,int,Document.OutputSettings)",
        "org.jsoup.parser.XmlTreeBuilder.insert(Token.Comment)"
    ],
    "Time-6": [
        "org.joda.time.chrono.GJChronology.ImpreciseCutoverField.add(long,int)",
        "org.joda.time.chrono.GJChronology.ImpreciseCutoverField.add(long,long)",
        "org.joda.time.chrono.GJChronology.getInstance(DateTimeZone,ReadableInstant,int)"
    ],
    "Closure-169": [
        "com.google.javascript.rhino.jstype.ArrowType.checkArrowEquivalenceHelper(ArrowType,boolean)",
        "com.google.javascript.rhino.jstype.ArrowType.hasEqualParameters(ArrowType,boolean)",
        "com.google.javascript.rhino.jstype.FunctionType.checkFunctionEquivalenceHelper(FunctionType,boolean)",
        "com.google.javascript.rhino.jstype.FunctionType.hasEqualCallType(FunctionType)",
        "com.google.javascript.rhino.jstype.FunctionType.tryMergeFunctionPiecewise(FunctionType,boolean)",
        "com.google.javascript.rhino.jstype.JSType.checkEquivalenceHelper(JSType,boolean)",
        "com.google.javascript.rhino.jstype.JSType.differsFrom(JSType)",
        "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(JSType)",
        "com.google.javascript.rhino.jstype.JSType.isInvariant(JSType)",
        "com.google.javascript.rhino.jstype.RecordType.checkRecordEquivalenceHelper(RecordType,boolean)",
        "com.google.javascript.rhino.jstype.RecordType.getGreatestSubtypeHelper(JSType)",
        "com.google.javascript.rhino.jstype.RecordType.isSubtype(ObjectType,RecordType)",
        "com.google.javascript.rhino.jstype.UnionType.checkUnionEquivalenceHelper(UnionType,boolean)",
        "com.google.javascript.rhino.jstype.UnionType.hasAlternate(JSType,boolean)"
    ],
    "JacksonDatabind-101": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithUnwrapped(JsonParser,DeserializationContext)"
    ],
    "JacksonCore-20": [
        "com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(Object)"
    ],
    "JacksonDatabind-99": [
        "com.fasterxml.jackson.databind.type.ReferenceType.buildCanonicalName()"
    ],
    "JacksonCore-23": [
        "com.fasterxml.jackson.core.util.DefaultPrettyPrinter.createInstance()"
    ],
    "Jsoup-64": [],
    "JacksonDatabind-49": [
        "com.fasterxml.jackson.databind.ser.impl.WritableObjectId.generateId(Object)"
    ],
    "JacksonDatabind-51": [
        "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(DeserializationContext,String)"
    ],
    "JacksonDatabind-50": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(JsonParser,DeserializationContext)"
    ],
    "Mockito-10": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.deepStub(InvocationOnMock,GenericMetadataSupport)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.newDeepStubMock(GenericMetadataSupport)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(GenericMetadataSupport)"
    ],
    "Jsoup-86": [
        "org.jsoup.nodes.Comment.asXmlDeclaration()"
    ],
    "JxPath-2": [
        "org.apache.commons.jxpath.ri.compiler.Expression.iterate(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.Expression.iteratePointers(EvalContext)"
    ],
    "Math-91": [
        "org.apache.commons.math.fraction.Fraction.compareTo(Fraction)"
    ],
    "Jsoup-47": [
        "org.jsoup.nodes.Entities.escape(StringBuilder,String,Document.OutputSettings,boolean,boolean,boolean)"
    ],
    "Lang-35": [
        "org.apache.commons.lang3.ArrayUtils.add(T[],T)",
        "org.apache.commons.lang3.ArrayUtils.add(T[],int,T)"
    ],
    "Jsoup-80": [
        "org.jsoup.parser.XmlTreeBuilder.insert(Token.Comment)"
    ],
    "Math-92": [
        "org.apache.commons.math.util.MathUtils.binomialCoefficient(int,int)",
        "org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(int,int)",
        "org.apache.commons.math.util.MathUtils.binomialCoefficientLog(int,int)"
    ],
    "Jsoup-92": [
        "org.jsoup.nodes.Attributes.add(String,String)",
        "org.jsoup.parser.HtmlTreeBuilder.insert(Token.StartTag)",
        "org.jsoup.parser.Token.Tag.newAttribute()",
        "org.jsoup.parser.XmlTreeBuilder.insert(Token.StartTag)"
    ],
    "JxPath-7": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan.computeValue(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual.computeValue(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan.computeValue(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual.computeValue(EvalContext)"
    ],
    "Closure-149": [
        "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun()",
        "com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions(CompilerOptions)",
        "com.google.javascript.jscomp.CommandLineRunner.createOptions()",
        "com.google.javascript.jscomp.Compiler.toSource(Node,SourceMap)"
    ],
    "JacksonDatabind-24": [
        "com.fasterxml.jackson.databind.cfg.BaseSettings.withDateFormat(DateFormat)"
    ],
    "Jsoup-72": [
        "org.jsoup.parser.CharacterReader.cacheString(char[],String[],int,int)"
    ],
    "Lang-42": [
        "org.apache.commons.lang.Entities.escape(Writer,String)"
    ],
    "Jsoup-1": [
        "org.jsoup.nodes.Document.normalise(Element)"
    ],
    "Math-14": [
        "org.apache.commons.math3.optim.nonlinear.vector.Weight.Weight(double[])",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer.squareRoot(RealMatrix)"
    ],
    "Codec-9": [
        "org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)"
    ],
    "JacksonDatabind-43": [
        "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty.deserializeSetAndReturn(JsonParser,DeserializationContext,Object)"
    ],
    "Compress-3": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry)"
    ],
    "Math-106": [
        "org.apache.commons.math.fraction.ProperFractionFormat.parse(String,ParsePosition)"
    ],
    "JxPath-16": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(Node,NodeTest)",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode(NodePointer,Object,NodeTest)"
    ],
    "Compress-13": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String)"
    ],
    "Closure-76": [
        "com.google.javascript.jscomp.DeadAssignmentsElimination.isVariableReadBeforeKill(Node,String)",
        "com.google.javascript.jscomp.DeadAssignmentsElimination.isVariableStillLiveWithinExpression(Node,Node,String)"
    ],
    "Math-63": [
        "org.apache.commons.math.util.MathUtils.equals(double,double)"
    ],
    "Math-48": [
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver.doSolve()"
    ],
    "Math-12": [],
    "Cli-18": [
        "org.apache.commons.cli.PosixParser.flatten(Options,String[],boolean)",
        "org.apache.commons.cli.PosixParser.processOptionToken(String,boolean)",
        "org.apache.commons.cli.PosixParser.processSingleHyphen(String)"
    ],
    "Closure-46": [
        "com.google.javascript.rhino.jstype.RecordType.getLeastSupertype(JSType)"
    ],
    "Math-24": [
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize()"
    ],
    "Math-99": [
        "org.apache.commons.math.util.MathUtils.gcd(int,int)",
        "org.apache.commons.math.util.MathUtils.lcm(int,int)"
    ],
    "Closure-115": [
        "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceDirectly(Node,Node)"
    ],
    "Jsoup-25": [],
    "Mockito-2": [
        "org.mockito.internal.util.Timer.Timer(long)"
    ],
    "Compress-40": [
        "org.apache.commons.compress.utils.BitInputStream.readBits(int)"
    ],
    "Jsoup-34": [
        "org.jsoup.parser.CharacterReader.nextIndexOf(CharSequence)"
    ],
    "Codec-2": [
        "org.apache.commons.codec.binary.Base64.encode(byte[],int,int)"
    ],
    "Time-17": [
        "org.joda.time.DateTimeZone.adjustOffset(long,boolean)"
    ],
    "JacksonDatabind-89": [],
    "Csv-2": [
        "org.apache.commons.csv.CSVRecord.get(String)"
    ],
    "Codec-10": [
        "org.apache.commons.codec.language.Caverphone.caverphone(String)"
    ],
    "Math-17": [
        "org.apache.commons.math3.dfp.Dfp.multiply(int)"
    ],
    "Lang-46": [
        "org.apache.commons.lang.StringEscapeUtils.escapeJava(String)",
        "org.apache.commons.lang.StringEscapeUtils.escapeJava(Writer,String)",
        "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(String)",
        "org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(Writer,String)",
        "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(String,boolean)",
        "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(Writer,String,boolean)"
    ],
    "JacksonDatabind-105": [
        "com.fasterxml.jackson.databind.deser.std.JdkDeserializers.find(Class<?>,String)"
    ],
    "Closure-17": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.getDeclaredType(String,JSDocInfo,Node,Node)"
    ],
    "Math-104": [],
    "Math-41": [
        "org.apache.commons.math.stat.descriptive.moment.Variance.evaluate(double[],double[],double,int,int)"
    ],
    "Jsoup-22": [
        "org.jsoup.nodes.Element.nextElementSibling()",
        "org.jsoup.nodes.Element.previousElementSibling()",
        "org.jsoup.nodes.Element.siblingElements()",
        "org.jsoup.nodes.Node.previousSibling()",
        "org.jsoup.nodes.Node.siblingNodes()"
    ],
    "Csv-13": [
        "org.apache.commons.csv.CSVPrinter.print(Object,CharSequence,int,int)"
    ],
    "Closure-54": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.maybeDeclareQualifiedName(NodeTraversal,JSDocInfo,Node,Node,Node)",
        "com.google.javascript.rhino.jstype.FunctionType.setPrototype(PrototypeObjectType)",
        "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(ObjectType)"
    ],
    "Jsoup-12": [
        "org.jsoup.select.Selector.combinator(char)"
    ],
    "Math-7": [
        "org.apache.commons.math3.ode.AbstractIntegrator.acceptStep(AbstractStepInterpolator,double[],double[],double)"
    ],
    "JacksonDatabind-84": [],
    "Chart-1": [
        "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItems()"
    ],
    "Closure-150": [
        "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.visit(NodeTraversal,Node,Node)"
    ],
    "JxPath-14": [
        "org.apache.commons.jxpath.ri.compiler.CoreFunction.functionCeiling(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreFunction.functionFloor(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreFunction.functionRound(EvalContext)"
    ],
    "Closure-50": [
        "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.tryFoldArrayJoin(Node)"
    ],
    "JacksonDatabind-55": [
        "com.fasterxml.jackson.databind.ser.std.StdKeySerializers.getFallbackKeySerializer(SerializationConfig,Class<?>)"
    ],
    "Math-36": [
        "org.apache.commons.math.fraction.BigFraction.doubleValue()",
        "org.apache.commons.math.fraction.BigFraction.floatValue()"
    ],
    "JacksonCore-14": [
        "com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[])",
        "com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[])",
        "com.fasterxml.jackson.core.io.IOContext.wrongBuf()"
    ],
    "Closure-12": [
        "com.google.javascript.jscomp.MaybeReachingVariableUse.hasExceptionHandler(Node)"
    ],
    "Cli-12": [
        "org.apache.commons.cli.GnuParser.flatten(Options,String[],boolean)"
    ],
    "Jsoup-3": [
        "org.jsoup.nodes.Element.append(String)",
        "org.jsoup.nodes.Element.prepend(String)",
        "org.jsoup.nodes.Element.wrap(String)",
        "org.jsoup.parser.Parser.addChildToParent(Element,boolean)",
        "org.jsoup.parser.Parser.stackHasValidParent(Tag)",
        "org.jsoup.parser.Tag.canContain(Tag)",
        "org.jsoup.parser.Tag.isValidParent(Tag)"
    ],
    "Codec-4": [
        "org.apache.commons.codec.binary.Base64.Base64()"
    ],
    "Mockito-22": [
        "org.mockito.internal.matchers.Equality.areEqual(Object,Object)"
    ],
    "Mockito-19": [
        "org.mockito.internal.configuration.injection.PropertyAndSetterInjection.injectMockCandidatesOnFields(Set<Object>,Object,boolean,List<Field>)",
        "org.mockito.internal.configuration.injection.filter.FinalMockCandidateFilter.filterCandidate(Collection<Object>,Field,Object)",
        "org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter.filterCandidate(Collection<Object>,Field,Object)",
        "org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter.filterCandidate(Collection<Object>,Field,Object)"
    ],
    "Closure-66": [
        "com.google.javascript.jscomp.TypeCheck.visit(NodeTraversal,Node,Node)"
    ],
    "Math-95": [
        "org.apache.commons.math.distribution.FDistributionImpl.getInitialDomain(double)"
    ],
    "Closure-163": [
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.AssignmentProperty.AssignmentProperty(Node,JSModule)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.AssignmentProperty.remove()",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.GlobalFunction.GlobalFunction(Node,Node,Node,JSModule)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.GlobalFunction.remove()",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty.LiteralProperty(Node,Node,Node,Node,JSModule)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.LiteralProperty.remove()",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.NameContext.NameContext(NameInfo)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.ProcessProperties()",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.enterScope(NodeTraversal)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.exitScope(NodeTraversal)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.isGlobalFunctionDeclaration(NodeTraversal,Node)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.isPrototypePropertyAssign(Node)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.processGlobalFunctionDeclaration(NodeTraversal,Node,Node,Node)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.processPrototypeParent(NodeTraversal,Node)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.shouldTraverse(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.visit(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.CrossModuleMethodMotion.moveMethods(Collection<NameInfo>)"
    ],
    "Jsoup-21": [
        "org.jsoup.select.QueryParser.combinator(char)",
        "org.jsoup.select.QueryParser.parse()"
    ],
    "JacksonDatabind-61": [
        "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.useForType(JavaType)",
        "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeDeserializer(DeserializationConfig,JavaType,Collection<NamedType>)",
        "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeSerializer(SerializationConfig,JavaType,Collection<NamedType>)"
    ],
    "Gson-5": [
        "com.google.gson.internal.bind.util.ISO8601Utils.parse(String,ParsePosition)"
    ],
    "Math-100": [
        "org.apache.commons.math.estimation.AbstractEstimator.getCovariances(EstimationProblem)",
        "org.apache.commons.math.estimation.AbstractEstimator.guessParametersErrors(EstimationProblem)"
    ],
    "Lang-19": [
        "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)"
    ],
    "JacksonCore-7": [
        "com.fasterxml.jackson.core.json.JsonWriteContext.writeValue()"
    ],
    "Codec-8": [
        "org.apache.commons.codec.binary.Base64.setInitialBuffer(byte[],int,int)",
        "org.apache.commons.codec.binary.Base64InputStream.read(byte,int,int)"
    ],
    "Jsoup-24": [],
    "Jsoup-8": [
        "org.jsoup.nodes.Node.outerHtml(StringBuilder)"
    ],
    "Closure-168": [
        "com.google.javascript.jscomp.TypedScopeCreator.FirstOrderFunctionAnalyzer.visit(NodeTraversal,Node,Node)"
    ],
    "Gson-3": [
        "com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(Type,Class<? super T>)"
    ],
    "Closure-107": [
        "com.google.javascript.jscomp.CommandLineRunner.createOptions()"
    ],
    "JacksonDatabind-66": [
        "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.DelegatingKD.deserializeKey(String,DeserializationContext)"
    ],
    "Lang-57": [
        "org.apache.commons.lang.LocaleUtils.isAvailableLocale(Locale)"
    ],
    "JacksonCore-12": [
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String)",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes(int)",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTokenLocation()",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName()",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(SerializableString)",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken()",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation()"
    ],
    "Jsoup-62": [],
    "Lang-36": [
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)",
        "org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ],
    "Math-77": [
        "org.apache.commons.math.linear.ArrayRealVector.getLInfNorm()",
        "org.apache.commons.math.linear.OpenMapRealVector.getLInfNorm()"
    ],
    "Closure-26": [
        "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.emitOptionalModuleExportsOverride(Node,String)",
        "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.visitModuleExports(Node)"
    ],
    "Cli-7": [],
    "Jsoup-36": [
        "org.jsoup.helper.DataUtil.getCharsetFromContentType(String)",
        "org.jsoup.helper.DataUtil.parseByteData(ByteBuffer,String,String,Parser)"
    ],
    "JacksonDatabind-70": [
        "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove(SettableBeanProperty)"
    ],
    "Lang-27": [
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ],
    "Csv-6": [
        "org.apache.commons.csv.CSVRecord.putIn(M)"
    ],
    "JacksonDatabind-71": [
        "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.forType(Class<?>)"
    ],
    "Lang-52": [
        "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(Writer,String,boolean)"
    ],
    "JacksonDatabind-93": [
        "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(DeserializationContext,JavaType)"
    ],
    "Math-75": [
        "org.apache.commons.math.stat.Frequency.getPct(Object)"
    ],
    "Codec-15": [
        "org.apache.commons.codec.language.Soundex.getMappingCode(String,int)"
    ],
    "Closure-152": [
        "com.google.javascript.rhino.jstype.FunctionType.resolveInternal(ErrorReporter,StaticScope<JSType>)"
    ],
    "Closure-88": [
        "com.google.javascript.jscomp.DeadAssignmentsElimination.isVariableReadBeforeKill(Node,String)"
    ],
    "Math-85": [
        "org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(UnivariateRealFunction,double,double,double,int)"
    ],
    "Closure-9": [
        "com.google.javascript.jscomp.ProcessCommonJSModules.ProcessCommonJsModulesCallback.visitScript(NodeTraversal,Node)",
        "com.google.javascript.jscomp.ProcessCommonJSModules.normalizeSourceName(String)"
    ],
    "Math-83": [
        "org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int,boolean)",
        "org.apache.commons.math.optimization.linear.SimplexTableau.getSolution()"
    ],
    "JacksonDatabind-38": [
        "com.fasterxml.jackson.databind.type.CollectionType.construct(Class<?>,JavaType)",
        "com.fasterxml.jackson.databind.type.MapType.construct(Class<?>,JavaType,JavaType)",
        "com.fasterxml.jackson.databind.type.SimpleType.construct(Class<?>)"
    ],
    "JacksonDatabind-26": [],
    "Jsoup-76": [],
    "JacksonCore-13": [],
    "Closure-95": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.defineSlot(Node,Node,JSType,boolean)"
    ],
    "Closure-60": [
        "com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(Node)",
        "com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(Node)"
    ],
    "Closure-4": [
        "com.google.javascript.rhino.jstype.NamedType.resolveInternal(ErrorReporter,StaticScope<JSType>)"
    ],
    "Compress-21": [
        "org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)"
    ],
    "JacksonDatabind-76": [
        "com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer.deserializeUsingPropertyBasedWithUnwrapped(JsonParser,DeserializationContext)"
    ],
    "Jsoup-43": [
        "org.jsoup.nodes.Element.indexInList(Element,List<E>)"
    ],
    "Closure-38": [
        "com.google.javascript.jscomp.CodeConsumer.addNumber(double)"
    ],
    "Mockito-34": [
        "org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(Invocation)"
    ],
    "Jsoup-68": [
        "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(String[],String[],String[])"
    ],
    "Mockito-6": [
        "org.mockito.Matchers.any()",
        "org.mockito.Matchers.any(Class<T>)",
        "org.mockito.Matchers.anyBoolean()",
        "org.mockito.Matchers.anyByte()",
        "org.mockito.Matchers.anyChar()",
        "org.mockito.Matchers.anyCollection()",
        "org.mockito.Matchers.anyCollectionOf(Class<T>)",
        "org.mockito.Matchers.anyDouble()",
        "org.mockito.Matchers.anyFloat()",
        "org.mockito.Matchers.anyInt()",
        "org.mockito.Matchers.anyList()",
        "org.mockito.Matchers.anyListOf(Class<T>)",
        "org.mockito.Matchers.anyLong()",
        "org.mockito.Matchers.anyMap()",
        "org.mockito.Matchers.anyMapOf(Class<K>,Class<V>)",
        "org.mockito.Matchers.anyObject()",
        "org.mockito.Matchers.anySet()",
        "org.mockito.Matchers.anySetOf(Class<T>)",
        "org.mockito.Matchers.anyShort()",
        "org.mockito.Matchers.anyString()"
    ],
    "Jsoup-55": [],
    "Math-71": [
        "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])",
        "org.apache.commons.math.ode.nonstiff.RungeKuttaIntegrator.integrate(FirstOrderDifferentialEquations,double,double[],double,double[])"
    ],
    "Math-66": [
        "org.apache.commons.math.optimization.univariate.BrentOptimizer.BrentOptimizer()",
        "org.apache.commons.math.optimization.univariate.BrentOptimizer.doOptimize()",
        "org.apache.commons.math.optimization.univariate.BrentOptimizer.localMin(boolean,UnivariateRealFunction,GoalType,double,double,double,double,double)",
        "org.apache.commons.math.optimization.univariate.BrentOptimizer.optimize(UnivariateRealFunction,GoalType,double,double)",
        "org.apache.commons.math.optimization.univariate.BrentOptimizer.optimize(UnivariateRealFunction,GoalType,double,double,double)"
    ],
    "Chart-9": [
        "org.jfree.data.time.TimeSeries.createCopy(RegularTimePeriod,RegularTimePeriod)"
    ],
    "Codec-18": [
        "org.apache.commons.codec.binary.StringUtils.equals(CharSequence,CharSequence)"
    ],
    "JacksonDatabind-1": [
        "com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsColumn(Object,JsonGenerator,SerializerProvider)"
    ],
    "Lang-8": [
        "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule.TimeZoneNameRule(TimeZone,Locale,int)",
        "org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule.appendTo(StringBuffer,Calendar)"
    ],
    "Math-52": [
        "org.apache.commons.math.geometry.euclidean.threed.Rotation.Rotation(Vector3D,Vector3D,Vector3D,Vector3D)"
    ],
    "Math-32": [
        "org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.computeGeometricalProperties()"
    ],
    "Lang-33": [
        "org.apache.commons.lang3.ClassUtils.toClass(Object[])"
    ],
    "Math-102": [
        "org.apache.commons.math.stat.inference.ChiSquareTestImpl.chiSquare(double[],long[])"
    ],
    "Math-47": [
        "org.apache.commons.math.complex.Complex.Complex(double,double)",
        "org.apache.commons.math.complex.Complex.divide(Complex)",
        "org.apache.commons.math.complex.Complex.divide(double)"
    ],
    "Jsoup-20": [
        "org.jsoup.helper.DataUtil.parseByteData(ByteBuffer,String,String,Parser)"
    ],
    "Math-33": [
        "org.apache.commons.math3.optimization.linear.SimplexTableau.dropPhase1Objective()"
    ],
    "Compress-7": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)"
    ],
    "Math-15": [
        "org.apache.commons.math3.util.FastMath.pow(double,double)"
    ],
    "Math-93": [
        "org.apache.commons.math.util.MathUtils.factorial(int)",
        "org.apache.commons.math.util.MathUtils.factorialDouble(int)",
        "org.apache.commons.math.util.MathUtils.factorialLog(int)"
    ],
    "Math-1": [
        "org.apache.commons.math3.fraction.BigFraction.BigFraction(double,double,int,int)",
        "org.apache.commons.math3.fraction.Fraction.Fraction(double,double,int,int)"
    ],
    "Codec-16": [],
    "Compress-36": [
        "org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream()"
    ],
    "Compress-8": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Closure-44": [
        "com.google.javascript.jscomp.CodeConsumer.add(String)"
    ],
    "Closure-75": [
        "com.google.javascript.jscomp.NodeUtil.getStringNumberValue(String)",
        "com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(int)"
    ],
    "JacksonCore-11": [
        "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifySharing()"
    ],
    "Math-103": [
        "org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(double)"
    ],
    "JacksonDatabind-21": [],
    "Math-26": [
        "org.apache.commons.math3.fraction.Fraction.Fraction(double,double,int,int)"
    ],
    "Closure-1": [
        "com.google.javascript.jscomp.RemoveUnusedVars.removeUnreferencedFunctionArgs(Scope)"
    ],
    "JacksonCore-21": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()"
    ],
    "Closure-72": [
        "com.google.javascript.jscomp.FunctionToBlockMutator.makeLocalNamesUnique(Node,boolean)",
        "com.google.javascript.jscomp.RenameLabels.ProcessLabels.visitLabel(Node,Node)"
    ],
    "Mockito-32": [
        "org.mockito.internal.configuration.SpyAnnotationEngine.process(Class<?>,Object)"
    ],
    "Mockito-38": [
        "org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool.toStringEquals(Matcher,Object)"
    ],
    "JacksonDatabind-36": [
        "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(DateFormat,String,TimeZone,Locale,Boolean)"
    ],
    "Time-1": [
        "org.joda.time.Partial.Partial(DateTimeFieldType[],int[],Chronology)",
        "org.joda.time.field.UnsupportedDurationField.compareTo(DurationField)"
    ],
    "Closure-92": [
        "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.replace()"
    ],
    "Cli-32": [
        "org.apache.commons.cli.HelpFormatter.findWrapPos(String,int,int)"
    ],
    "Compress-12": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()"
    ],
    "Lang-20": [
        "org.apache.commons.lang3.StringUtils.join(Object[],String,int,int)",
        "org.apache.commons.lang3.StringUtils.join(Object[],char,int,int)"
    ],
    "Jsoup-79": [
        "org.jsoup.nodes.LeafNode.ensureChildNodes()"
    ],
    "Jsoup-51": [
        "org.jsoup.parser.CharacterReader.matchesLetter()"
    ],
    "Math-50": [
        "org.apache.commons.math.analysis.solvers.BaseSecantSolver.doSolve()"
    ],
    "Cli-1": [
        "org.apache.commons.cli.CommandLine.addOption(Option)",
        "org.apache.commons.cli.CommandLine.getOptionObject(String)",
        "org.apache.commons.cli.CommandLine.getOptionValues(String)",
        "org.apache.commons.cli.CommandLine.getOptions()",
        "org.apache.commons.cli.CommandLine.hasOption(String)",
        "org.apache.commons.cli.CommandLine.iterator()"
    ],
    "JacksonDatabind-74": [
        "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(JsonParser,DeserializationContext,TokenBuffer)"
    ],
    "Cli-11": [
        "org.apache.commons.cli.HelpFormatter.appendOption(StringBuffer,Option,boolean)"
    ],
    "Lang-30": [
        "org.apache.commons.lang3.StringUtils.containsAny(CharSequence,String)",
        "org.apache.commons.lang3.StringUtils.containsAny(CharSequence,char[])",
        "org.apache.commons.lang3.StringUtils.containsNone(CharSequence,char[])",
        "org.apache.commons.lang3.StringUtils.indexOfAny(CharSequence,char[])",
        "org.apache.commons.lang3.StringUtils.indexOfAnyBut(CharSequence,char[])",
        "org.apache.commons.lang3.StringUtils.indexOfAnyBut(String,String)"
    ],
    "Closure-15": [],
    "Math-82": [
        "org.apache.commons.math.optimization.linear.SimplexSolver.getPivotRow(int,SimplexTableau)"
    ],
    "JacksonDatabind-34": [
        "com.fasterxml.jackson.databind.ser.std.NumberSerializer.acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType)"
    ],
    "Time-20": [
        "org.joda.time.format.DateTimeFormatterBuilder.parseInto(DateTimeParserBucket,String,int)"
    ],
    "Chart-11": [
        "org.jfree.chart.util.ShapeUtilities.equal(GeneralPath,GeneralPath)"
    ],
    "Lang-17": [
        "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequence,Writer)"
    ],
    "Lang-44": [
        "org.apache.commons.lang.NumberUtils.createNumber(String)"
    ],
    "Jsoup-29": [
        "org.jsoup.nodes.Document.title()"
    ],
    "Closure-20": [
        "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryFoldSimpleFunctionCall(Node)"
    ],
    "Mockito-15": [
        "org.mockito.internal.configuration.injection.FinalMockCandidateFilter.filterCandidate(Collection<Object>,Field,Object)"
    ],
    "Lang-7": [
        "org.apache.commons.lang3.math.NumberUtils.createBigDecimal(String)",
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ],
    "JxPath-20": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compute(Object,Object)"
    ],
    "JacksonDatabind-91": [
        "com.fasterxml.jackson.databind.deser.DeserializerCache._hasCustomHandlers(JavaType)"
    ],
    "JacksonDatabind-58": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty(DeserializationContext,BeanDescription,BeanPropertyDefinition,JavaType)"
    ],
    "Time-13": [
        "org.joda.time.format.PeriodFormatterBuilder.FieldFormatter.calculatePrintedLength(ReadablePeriod,Locale)",
        "org.joda.time.format.PeriodFormatterBuilder.FieldFormatter.printTo(StringBuffer,ReadablePeriod,Locale)"
    ],
    "Time-12": [
        "org.joda.time.LocalDate.fromCalendarFields(Calendar)",
        "org.joda.time.LocalDate.fromDateFields(Date)",
        "org.joda.time.LocalDateTime.fromCalendarFields(Calendar)",
        "org.joda.time.LocalDateTime.fromDateFields(Date)"
    ],
    "Math-62": [
        "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer.optimize(FUNC,GoalType,double,double)",
        "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer.optimize(FUNC,GoalType,double,double,double)"
    ],
    "Closure-147": [
        "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.RuntimeTypeCheck.AddChecks.visitFunction(NodeTraversal,Node)"
    ],
    "Closure-19": [
        "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.declareNameInScope(FlowScope,Node,JSType)"
    ],
    "Codec-12": [],
    "Math-34": [
        "org.apache.commons.math3.genetics.ListPopulation.iterator()"
    ],
    "Chart-2": [
        "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(XYDataset,boolean)",
        "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(XYDataset,boolean)"
    ],
    "Closure-112": [
        "com.google.javascript.jscomp.TypeInference.inferTemplatedTypesForCall(Node,FunctionType)"
    ],
    "JacksonDatabind-14": [
        "com.fasterxml.jackson.databind.ObjectReader._bindAsTree(JsonParser)"
    ],
    "Closure-97": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldShift(Node,Node,Node)"
    ],
    "Gson-17": [
        "com.google.gson.DefaultDateTypeAdapter.read(JsonReader)"
    ],
    "Math-23": [
        "org.apache.commons.math3.optimization.univariate.BrentOptimizer.doOptimize()"
    ],
    "JacksonDatabind-68": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromBoolean(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromDouble(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromNumber(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(JsonParser,DeserializationContext)"
    ],
    "Time-9": [
        "org.joda.time.DateTimeZone.forOffsetHoursMinutes(int,int)",
        "org.joda.time.DateTimeZone.forOffsetMillis(int)"
    ],
    "Jsoup-7": [
        "org.jsoup.nodes.Document.normalise()"
    ],
    "Compress-6": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)"
    ],
    "Math-54": [
        "org.apache.commons.math.dfp.Dfp.Dfp(DfpField,double)",
        "org.apache.commons.math.dfp.Dfp.toDouble()"
    ],
    "Compress-1": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()"
    ],
    "Math-61": [
        "org.apache.commons.math.distribution.PoissonDistributionImpl.PoissonDistributionImpl(double,double,int)"
    ],
    "Gson-7": [
        "com.google.gson.stream.JsonReader.nextInt()",
        "com.google.gson.stream.JsonReader.nextLong()"
    ],
    "Time-22": [
        "org.joda.time.base.BasePeriod.BasePeriod(long)"
    ],
    "Closure-56": [
        "com.google.javascript.jscomp.SourceFile.getLine(int)"
    ],
    "Math-86": [
        "org.apache.commons.math.linear.CholeskyDecompositionImpl.CholeskyDecompositionImpl(RealMatrix,double,double)"
    ],
    "JacksonDatabind-59": [
        "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(JavaType,Class<?>)"
    ],
    "Time-19": [
        "org.joda.time.DateTimeZone.getOffsetFromLocal(long)"
    ],
    "Jsoup-26": [
        "org.jsoup.safety.Cleaner.clean(Document)"
    ],
    "Compress-16": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)"
    ],
    "JacksonDatabind-29": [
        "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler._deserialize(JsonParser,DeserializationContext,int,String)",
        "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler._deserializeAndSet(JsonParser,DeserializationContext,Object,int,String)"
    ],
    "Jsoup-17": [],
    "Cli-22": [
        "org.apache.commons.cli.PosixParser.burstToken(String,boolean)",
        "org.apache.commons.cli.PosixParser.flatten(Options,String[],boolean)",
        "org.apache.commons.cli.PosixParser.processNonOptionToken(String)",
        "org.apache.commons.cli.PosixParser.processOptionToken(String,boolean)"
    ],
    "Jsoup-35": [],
    "Math-84": [
        "org.apache.commons.math.optimization.direct.MultiDirectional.iterateSimplex(Comparator<RealPointValuePair>)"
    ],
    "Closure-148": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldTypeof(Node)",
        "com.google.javascript.jscomp.SourceMap.LineMapper.addCharEntry(String)",
        "com.google.javascript.jscomp.SourceMap.LineMapper.appendLineMappings()",
        "com.google.javascript.jscomp.SourceMap.LineMapper.closeLine()",
        "com.google.javascript.jscomp.SourceMap.LineMapper.openLine()",
        "com.google.javascript.jscomp.SourceMap.LineMapper.writeCharsBetween(Mapping,Mapping)",
        "com.google.javascript.jscomp.SourceMap.LineMapper.writeCharsUpTo(int,int,int)",
        "com.google.javascript.jscomp.SourceMap.LineMapper.writeClosedMapping(Mapping)",
        "com.google.javascript.jscomp.SourceMap.Mapping.appendTo(Appendable)",
        "com.google.javascript.jscomp.SourceMap.addMapping(Node,Position,Position)",
        "com.google.javascript.jscomp.SourceMap.appendTo(Appendable,String)",
        "com.google.javascript.jscomp.SourceMap.findLastLine()"
    ],
    "Cli-2": [
        "org.apache.commons.cli.PosixParser.burstToken(String,boolean)"
    ],
    "JacksonCore-2": [
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber(int)",
        "com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber(int)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parserNumber2(char[],int,boolean,int)",
        "com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWSOrEnd()"
    ],
    "Jsoup-14": [],
    "Closure-13": [
        "com.google.javascript.jscomp.PeepholeOptimizationsPass.traverse(Node)"
    ],
    "Jsoup-2": [
        "org.jsoup.parser.Parser.parseStartTag()"
    ],
    "Cli-5": [
        "org.apache.commons.cli.Util.stripLeadingHyphens(String)"
    ],
    "Time-14": [
        "org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(ReadablePartial,int,int[],int)"
    ],
    "Math-29": [
        "org.apache.commons.math3.linear.OpenMapRealVector.ebeDivide(RealVector)",
        "org.apache.commons.math3.linear.OpenMapRealVector.ebeMultiply(RealVector)"
    ],
    "Closure-154": [
        "com.google.javascript.jscomp.TypeCheck.checkDeclaredPropertyInheritance(NodeTraversal,Node,FunctionType,String,JSDocInfo,JSType)",
        "com.google.javascript.jscomp.TypeValidator.expectInterfaceProperty(NodeTraversal,Node,ObjectType,ObjectType,String)"
    ],
    "Collections-26": [
        "org.apache.commons.collections4.keyvalue.MultiKey.readResolve()"
    ],
    "JacksonDatabind-45": [
        "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.createContextual(SerializerProvider,BeanProperty)"
    ],
    "Closure-125": [
        "com.google.javascript.jscomp.TypeCheck.visitNew(NodeTraversal,Node)"
    ],
    "Closure-31": [
        "com.google.javascript.jscomp.Compiler.parseInputs()"
    ],
    "Time-3": [
        "org.joda.time.MutableDateTime.add(DurationFieldType,int)",
        "org.joda.time.MutableDateTime.addDays(int)",
        "org.joda.time.MutableDateTime.addHours(int)",
        "org.joda.time.MutableDateTime.addMillis(int)",
        "org.joda.time.MutableDateTime.addMinutes(int)",
        "org.joda.time.MutableDateTime.addMonths(int)",
        "org.joda.time.MutableDateTime.addSeconds(int)",
        "org.joda.time.MutableDateTime.addWeeks(int)",
        "org.joda.time.MutableDateTime.addWeekyears(int)",
        "org.joda.time.MutableDateTime.addYears(int)"
    ],
    "Math-13": [
        "org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer.squareRoot(RealMatrix)"
    ],
    "Closure-172": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.isQualifiedNameInferred(String,Node,JSDocInfo,Node,JSType)"
    ],
    "Cli-40": [
        "org.apache.commons.cli.TypeHandler.createValue(String,Class<T>)"
    ],
    "Jsoup-83": [
        "org.jsoup.parser.CharacterReader.consumeTagName()"
    ],
    "Closure-81": [
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(FunctionNode)"
    ],
    "Compress-30": [
        "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)"
    ],
    "Jsoup-93": [
        "org.jsoup.nodes.FormElement.formData()"
    ],
    "Cli-36": [],
    "Compress-33": [
        "org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream)"
    ],
    "Math-76": [
        "org.apache.commons.math.linear.SingularValueDecompositionImpl.getU()",
        "org.apache.commons.math.linear.SingularValueDecompositionImpl.getV()"
    ],
    "Lang-25": [],
    "Closure-157": [
        "com.google.javascript.jscomp.CodeGenerator.add(Node,Context)",
        "com.google.javascript.jscomp.RenamePrototypes.ProcessProperties.processPrototypeParent(Node,CompilerInput)",
        "com.google.javascript.jscomp.RenamePrototypes.ProcessProperties.visit(NodeTraversal,Node,Node)",
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(AstNode)"
    ],
    "Lang-37": [
        "org.apache.commons.lang3.ArrayUtils.addAll(T[],T)"
    ],
    "Cli-19": [
        "org.apache.commons.cli.PosixParser.processOptionToken(String,boolean)"
    ],
    "Cli-39": [
        "org.apache.commons.cli.TypeHandler.createValue(String,Class<?>)"
    ],
    "Closure-7": [
        "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByOneTypeOfResultVisitor.caseObjectType(ObjectType)"
    ],
    "Compress-18": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(String,Map<String,String>)"
    ],
    "JxPath-3": [
        "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer.createPath(JXPathContext)",
        "org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer.createPath(JXPathContext,Object)"
    ],
    "Jsoup-74": [
        "org.jsoup.helper.StringUtil.appendNormalisedWhitespace(StringBuilder,String,boolean)"
    ],
    "Math-35": [
        "org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(List<Chromosome>,int,double)",
        "org.apache.commons.math3.genetics.ElitisticListPopulation.ElitisticListPopulation(int,double)"
    ],
    "Closure-73": [
        "com.google.javascript.jscomp.CodeGenerator.strEscape(String,char,String,String,String,CharsetEncoder)"
    ],
    "Time-25": [
        "org.joda.time.DateTimeZone.getOffsetFromLocal(long)"
    ],
    "Cli-4": [
        "org.apache.commons.cli.Parser.checkRequiredOptions()"
    ],
    "Time-24": [
        "org.joda.time.format.DateTimeParserBucket.computeMillis(boolean,String)"
    ],
    "Lang-38": [
        "org.apache.commons.lang3.time.FastDateFormat.format(Calendar,StringBuffer)"
    ],
    "Closure-58": [
        "com.google.javascript.jscomp.LiveVariablesAnalysis.computeGenKill(Node,BitSet,BitSet,boolean)"
    ],
    "Closure-121": [
        "com.google.javascript.jscomp.InlineVariables.InliningBehavior.inlineNonConstants(Var,ReferenceCollection,boolean)"
    ],
    "Lang-63": [
        "org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(long,long,String,boolean,TimeZone)",
        "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(Calendar,Calendar,int,int)"
    ],
    "Jsoup-38": [],
    "Closure-34": [
        "com.google.javascript.jscomp.CodeGenerator.add(Node,Context)",
        "com.google.javascript.jscomp.CodeGenerator.unrollBinaryOperator(Node,int,String,Context,Context,int,int)",
        "com.google.javascript.jscomp.CodePrinter.PrettyCodePrinter.appendOp(String,boolean)"
    ],
    "Closure-55": [
        "com.google.javascript.jscomp.FunctionRewriter.isReduceableFunctionExpression(Node)"
    ],
    "JxPath-11": [
        "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.getAttribute(Element,QName)",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator.JDOMAttributeIterator(NodePointer,QName)"
    ],
    "JacksonDatabind-9": [
        "com.fasterxml.jackson.databind.ser.std.StdKeySerializer.serialize(Object,JsonGenerator,SerializerProvider)"
    ],
    "JacksonDatabind-73": [
        "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._removeUnwantedAccessor(Map<String,POJOPropertyBuilder>)",
        "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.removeNonVisible(boolean)"
    ],
    "JacksonDatabind-11": [
        "com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(TypeVariable<?>,TypeBindings)"
    ],
    "Jsoup-69": [],
    "Closure-90": [
        "com.google.javascript.jscomp.FunctionTypeBuilder.ThisTypeValidator.apply(JSType)",
        "com.google.javascript.rhino.jstype.FunctionType.resolveInternal(ErrorReporter,StaticScope<JSType>)"
    ],
    "Math-89": [
        "org.apache.commons.math.stat.Frequency.addValue(Object)"
    ],
    "Closure-22": [
        "com.google.javascript.jscomp.CheckSideEffects.visit(NodeTraversal,Node,Node)"
    ],
    "Jsoup-9": [],
    "JacksonDatabind-16": [
        "com.fasterxml.jackson.databind.introspect.AnnotationMap._add(Annotation)"
    ],
    "JacksonCore-17": [
        "com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)",
        "com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int)"
    ],
    "Jsoup-91": [
        "org.jsoup.parser.CharacterReader.CharacterReader(Reader,int)"
    ],
    "JacksonDatabind-56": [
        "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std._deserialize(String,DeserializationContext)"
    ],
    "Closure-161": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldArrayAccess(Node,Node,Node)"
    ],
    "Closure-128": [
        "com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(String)"
    ],
    "Csv-12": [],
    "Closure-94": [
        "com.google.javascript.jscomp.NodeUtil.isValidDefineValue(Node,Set<String>)"
    ],
    "Closure-130": [
        "com.google.javascript.jscomp.CollapseProperties.inlineAliases(GlobalNamespace)"
    ],
    "Cli-14": [
        "org.apache.commons.cli2.option.GroupImpl.validate(WriteableCommandLine)"
    ],
    "JxPath-13": [
        "org.apache.commons.jxpath.ri.NamespaceResolver.getNamespaceURI(String)",
        "org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(String)",
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.createAttribute(JXPathContext,QName)"
    ],
    "Math-46": [
        "org.apache.commons.math.complex.Complex.divide(Complex)",
        "org.apache.commons.math.complex.Complex.divide(double)"
    ],
    "Closure-116": [
        "com.google.javascript.jscomp.FunctionInjector.canInlineReferenceDirectly(Node,Node)"
    ],
    "Math-64": [
        "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize()"
    ],
    "Csv-8": [
        "org.apache.commons.csv.CSVFormat.CSVFormat(char,Character,Quote,Character,Character,boolean,boolean,String,String,String[],boolean)",
        "org.apache.commons.csv.CSVFormat.validate()"
    ],
    "Cli-8": [
        "org.apache.commons.cli.HelpFormatter.renderWrappedText(StringBuffer,int,int,String)"
    ],
    "Compress-28": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)"
    ],
    "Cli-17": [
        "org.apache.commons.cli.PosixParser.burstToken(String,boolean)"
    ],
    "Jsoup-57": [
        "org.jsoup.nodes.Attributes.removeIgnoreCase(String)"
    ],
    "Closure-136": [
        "com.google.javascript.jscomp.MethodCompilerPass.addPossibleSignature(String,Node,NodeTraversal)",
        "com.google.javascript.jscomp.RenameVars.ProcessVars.visit(NodeTraversal,Node,Node)"
    ],
    "Jsoup-53": [
        "org.jsoup.parser.TokenQueue.chompBalanced(char,char)"
    ],
    "Jsoup-44": [
        "org.jsoup.parser.TreeBuilder.processEndTag(String)",
        "org.jsoup.parser.TreeBuilder.processStartTag(String)",
        "org.jsoup.parser.TreeBuilder.processStartTag(String,Attributes)"
    ],
    "Jsoup-65": [
        "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableBodyContext()",
        "org.jsoup.parser.HtmlTreeBuilder.clearStackToTableRowContext()"
    ],
    "Math-19": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters()"
    ],
    "Closure-33": [
        "com.google.javascript.rhino.jstype.PrototypeObjectType.matchConstraint(ObjectType)"
    ],
    "Closure-79": [
        "com.google.javascript.jscomp.Normalize.process(Node,Node)",
        "com.google.javascript.jscomp.VarCheck.createSynthesizedExternVar(String)"
    ],
    "JxPath-9": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.CoreOperationCompare(Expression,Expression)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.equal(Object,Object)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationEqual.computeValue(EvalContext)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual.CoreOperationNotEqual(Expression,Expression)",
        "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual.computeValue(EvalContext)"
    ],
    "Compress-38": [
        "org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory()"
    ],
    "JacksonXml-4": [
        "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(JsonGenerator)"
    ],
    "JxPath-1": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(Node,NodeTest)",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode(NodePointer,Object,NodeTest)"
    ],
    "Closure-143": [
        "com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(List<String>,CompilerOptions)",
        "com.google.javascript.jscomp.RemoveConstantExpressions.RemoveConstantRValuesCallback.trySimplify(Node,Node)"
    ],
    "Math-53": [
        "org.apache.commons.math.complex.Complex.add(Complex)"
    ],
    "Closure-43": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.attachLiteralTypes(NodeTraversal,Node)",
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.visit(NodeTraversal,Node,Node)"
    ],
    "Closure-129": [
        "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateCalls(Node)"
    ],
    "Cli-27": [
        "org.apache.commons.cli.OptionGroup.setSelected(Option)"
    ],
    "Lang-10": [
        "org.apache.commons.lang3.time.FastDateParser.escapeRegex(StringBuilder,String,boolean)"
    ],
    "Mockito-18": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues.returnValueFor(Class<?>)"
    ],
    "Closure-78": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.performArithmeticOp(int,Node,Node)"
    ],
    "Jsoup-89": [
        "org.jsoup.nodes.Attribute.setValue(String)"
    ],
    "Jsoup-78": [
        "org.jsoup.helper.DataUtil.parseInputStream(InputStream,String,String,Parser)"
    ],
    "Closure-45": [
        "com.google.javascript.jscomp.RemoveUnusedVars.Assign.Assign(Node,Node,boolean)",
        "com.google.javascript.jscomp.RemoveUnusedVars.interpretAssigns()"
    ],
    "Math-96": [
        "org.apache.commons.math.complex.Complex.equals(Object)"
    ],
    "Closure-165": [
        "com.google.javascript.rhino.jstype.JSTypeRegistry.canPropertyBeDefined(JSType,String)",
        "com.google.javascript.rhino.jstype.RecordType.RecordType(JSTypeRegistry,Map<String,RecordProperty>)",
        "com.google.javascript.rhino.jstype.RecordType.getGreatestSubtypeHelper(JSType)",
        "com.google.javascript.rhino.jstype.RecordTypeBuilder.build()"
    ],
    "Lang-14": [
        "org.apache.commons.lang3.StringUtils.equals(CharSequence,CharSequence)"
    ],
    "Codec-11": [
        "org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])",
        "org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(BitSet,byte[])",
        "org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(int,ByteArrayOutputStream)"
    ],
    "JacksonDatabind-2": [
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeObject(Object)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.writeTree(TreeNode)"
    ],
    "Math-72": [
        "org.apache.commons.math.analysis.solvers.BrentSolver.solve(UnivariateRealFunction,double,double,double)"
    ],
    "Collections-28": [],
    "Closure-71": [
        "com.google.javascript.jscomp.CheckAccessControls.checkPropertyVisibility(NodeTraversal,Node,Node)"
    ],
    "JacksonDatabind-92": [],
    "Closure-36": [
        "com.google.javascript.jscomp.InlineVariables.InliningBehavior.canInline(Reference,Reference,Reference)"
    ],
    "Closure-171": [
        "com.google.javascript.jscomp.TypeInference.traverseObjectLiteral(Node,FlowScope)",
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.isQualifiedNameInferred(String,Node,JSDocInfo,Node,JSType)"
    ],
    "Math-16": [
        "org.apache.commons.math3.util.FastMath.cosh(double)",
        "org.apache.commons.math3.util.FastMath.sinh(double)"
    ],
    "Lang-55": [
        "org.apache.commons.lang.time.StopWatch.stop()"
    ],
    "JacksonDatabind-8": [
        "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.verifyNonDup(AnnotatedWithParams,int,boolean)"
    ],
    "Compress-45": [
        "org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)"
    ],
    "Csv-5": [
        "org.apache.commons.csv.CSVPrinter.println()"
    ],
    "Math-56": [
        "org.apache.commons.math.util.MultidimensionalCounter.getCounts(int)"
    ],
    "Cli-24": [
        "org.apache.commons.cli.HelpFormatter.renderWrappedText(StringBuffer,int,int,String)"
    ],
    "Cli-28": [
        "org.apache.commons.cli.Parser.processProperties(Properties)"
    ],
    "JacksonDatabind-10": [
        "com.fasterxml.jackson.databind.ser.AnyGetterWriter.AnyGetterWriter(BeanProperty,AnnotatedMember,MapSerializer)",
        "com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndFilter(Object,JsonGenerator,SerializerProvider,PropertyFilter)",
        "com.fasterxml.jackson.databind.ser.AnyGetterWriter.getAndSerialize(Object,JsonGenerator,SerializerProvider)",
        "com.fasterxml.jackson.databind.ser.AnyGetterWriter.resolve(SerializerProvider)",
        "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(SerializerProvider,BeanDescription)"
    ],
    "Gson-9": [],
    "JacksonDatabind-37": [
        "com.fasterxml.jackson.databind.type.SimpleType._narrow(Class<?>)"
    ],
    "JacksonDatabind-109": [
        "com.fasterxml.jackson.databind.ser.std.NumberSerializer.createContextual(SerializerProvider,BeanProperty)",
        "com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base.createContextual(SerializerProvider,BeanProperty)"
    ],
    "Closure-57": [
        "com.google.javascript.jscomp.ClosureCodingConvention.extractClassNameIfGoog(Node,Node,String)"
    ],
    "Mockito-28": [
        "org.mockito.internal.configuration.DefaultInjectionEngine.injectMockCandidate(Class<?>,Set<Object>,Object)"
    ],
    "Lang-6": [
        "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequence,Writer)"
    ],
    "Math-22": [
        "org.apache.commons.math3.distribution.FDistribution.isSupportLowerBoundInclusive()",
        "org.apache.commons.math3.distribution.UniformRealDistribution.isSupportUpperBoundInclusive()"
    ],
    "Compress-24": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Compress-46": [
        "org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long)"
    ],
    "JacksonDatabind-81": [
        "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineDeserializationType(MapperConfig<?>,Annotated,JavaType)",
        "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineSerializationType(MapperConfig<?>,Annotated,JavaType)"
    ],
    "Mockito-27": [
        "org.mockito.internal.util.MockUtil.resetMock(T)"
    ],
    "Compress-25": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)"
    ],
    "Closure-82": [
        "com.google.javascript.rhino.jstype.JSType.isEmptyType()"
    ],
    "Math-20": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.repairAndDecode(double[])"
    ],
    "Compress-14": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Jsoup-59": [
        "org.jsoup.parser.Token.Tag.newAttribute()"
    ],
    "Closure-124": [
        "com.google.javascript.jscomp.ExploitAssigns.isSafeReplacement(Node,Node)"
    ],
    "JacksonXml-2": [
        "com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()"
    ],
    "JacksonDatabind-83": [
        "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Math-43": [
        "org.apache.commons.math.stat.descriptive.SummaryStatistics.addValue(double)"
    ],
    "Closure-83": [
        "com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.parseArguments(Parameters)"
    ],
    "Math-80": [
        "org.apache.commons.math.linear.EigenDecompositionImpl.flipIfWarranted(int,int)"
    ],
    "Lang-61": [
        "org.apache.commons.lang.text.StrBuilder.indexOf(String,int)"
    ],
    "Lang-5": [
        "org.apache.commons.lang3.LocaleUtils.toLocale(String)"
    ],
    "Csv-9": [
        "org.apache.commons.csv.CSVRecord.putIn(M)"
    ],
    "Closure-120": [
        "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection.isAssignedOnceInLifetime()"
    ],
    "Time-2": [
        "org.joda.time.Partial.Partial(DateTimeFieldType[],int[],Chronology)",
        "org.joda.time.Partial.with(DateTimeFieldType,int)",
        "org.joda.time.field.UnsupportedDurationField.compareTo(DurationField)"
    ],
    "Csv-7": [
        "org.apache.commons.csv.CSVParser.initializeHeader()"
    ],
    "JacksonDatabind-57": [
        "com.fasterxml.jackson.databind.ObjectReader.readValues(byte[],int,int)"
    ],
    "Closure-11": [
        "com.google.javascript.jscomp.TypeCheck.visitGetProp(NodeTraversal,Node,Node)"
    ],
    "Jsoup-6": [
        "org.jsoup.nodes.Entities.unescape(String)"
    ],
    "Cli-34": [
        "org.apache.commons.cli.OptionBuilder.reset()"
    ],
    "Mockito-8": [
        "org.mockito.internal.util.reflection.GenericMetadataSupport.registerTypeVariablesOn(Type)"
    ],
    "Compress-27": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Compress-26": [
        "org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)"
    ],
    "Cli-21": [
        "org.apache.commons.cli2.commandline.WriteableCommandLineImpl.WriteableCommandLineImpl(Option,List)",
        "org.apache.commons.cli2.commandline.WriteableCommandLineImpl.looksLikeOption(String)",
        "org.apache.commons.cli2.option.GroupImpl.looksLikeOption(WriteableCommandLine,String)"
    ],
    "Closure-146": [
        "com.google.javascript.rhino.jstype.JSType.getTypesUnderInequality(JSType)"
    ],
    "Closure-8": [
        "com.google.javascript.jscomp.CollapseVariableDeclarations.GatherCollapses.canBeRedeclared(Node,Scope)"
    ],
    "Jsoup-30": [
        "org.jsoup.safety.Cleaner.copySafeNodes(Element,Element)"
    ],
    "Closure-70": [
        "com.google.javascript.jscomp.TypedScopeCreator.LocalScopeBuilder.declareArguments(Node)"
    ],
    "Lang-16": [
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ],
    "Closure-176": [
        "com.google.javascript.jscomp.TypeInference.updateScopeForTypeChange(FlowScope,Node,JSType,JSType)"
    ],
    "Gson-10": [
        "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)"
    ],
    "Mockito-4": [
        "org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Exception)",
        "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Invocation,List<VerificationAwareInvocation>)",
        "org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Invocation)"
    ],
    "Closure-51": [
        "com.google.javascript.jscomp.CodeConsumer.addNumber(double)"
    ],
    "Jsoup-50": [
        "org.jsoup.helper.DataUtil.parseByteData(ByteBuffer,String,String,Parser)"
    ],
    "Collections-25": [
        "org.apache.commons.collections4.IteratorUtils.collatedIterator(Comparator<? super E>,Collection<Iterator<? extends E>>)",
        "org.apache.commons.collections4.IteratorUtils.collatedIterator(Comparator<? super E>,Iterator<? extends E>)",
        "org.apache.commons.collections4.IteratorUtils.collatedIterator(Comparator<? super E>,Iterator<? extends E>,Iterator<? extends E>)"
    ],
    "JacksonDatabind-95": [
        "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(Class<?>,Class<?>)",
        "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(JavaType,Class<?>)",
        "com.fasterxml.jackson.databind.type.TypeParser.parseType(MyTokenizer)"
    ],
    "Math-18": [
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.decode(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.encode(double[])",
        "org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.isFeasible(double[])"
    ],
    "Math-58": [
        "org.apache.commons.math.optimization.fitting.GaussianFitter.fit()"
    ],
    "JacksonDatabind-17": [
        "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.useForType(JavaType)"
    ],
    "JacksonDatabind-19": [
        "com.fasterxml.jackson.databind.type.TypeFactory._mapType(Class<?>)"
    ],
    "JacksonDatabind-40": [],
    "Codec-14": [
        "org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules(PhonemeBuilder,Map<String,List<Rule>>)"
    ],
    "Math-9": [
        "org.apache.commons.math3.geometry.euclidean.threed.Line.revert()"
    ],
    "JacksonDatabind-42": [
        "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std._deserializeFromEmptyString()"
    ],
    "Cli-31": [
        "org.apache.commons.cli.HelpFormatter.appendOption(StringBuffer,Option,boolean)",
        "org.apache.commons.cli.OptionBuilder.reset()"
    ],
    "JacksonDatabind-90": [
        "com.fasterxml.jackson.databind.deser.ValueInstantiator.canInstantiate()"
    ],
    "JacksonCore-10": [
        "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd(int)",
        "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int)"
    ],
    "Jsoup-46": [
        "org.jsoup.nodes.Entities.escape(StringBuilder,String,Document.OutputSettings,boolean,boolean,boolean)"
    ],
    "Mockito-9": [
        "org.mockito.internal.stubbing.answers.CallsRealMethods.answer(InvocationOnMock)"
    ],
    "Closure-153": [
        "com.google.javascript.jscomp.Normalize.DuplicateDeclarationHandler.onRedeclaration(Scope,String,Node,Node,Node,Node)",
        "com.google.javascript.jscomp.SyntacticScopeCreator.DefaultRedeclarationHandler.onRedeclaration(Scope,String,Node,Node,Node,Node)",
        "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(String,Node,Node,Node,JSType,Node)",
        "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(Node,Scope)",
        "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(Node,Node)"
    ],
    "Compress-41": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()"
    ],
    "JacksonCore-24": [
        "com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String)",
        "com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()",
        "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String)",
        "com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String)"
    ],
    "Lang-15": [
        "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(Class<?>,Class<?>,Map<TypeVariable<?>,Type>)",
        "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)"
    ],
    "Jsoup-5": [
        "org.jsoup.parser.Parser.parseAttribute()"
    ],
    "Closure-39": [
        "com.google.javascript.rhino.jstype.PrototypeObjectType.toStringHelper(boolean)"
    ],
    "Jsoup-70": [
        "org.jsoup.nodes.Element.preserveWhitespace(Node)"
    ],
    "Compress-32": [
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map<String,String>)"
    ],
    "Closure-48": [
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.maybeDeclareQualifiedName(NodeTraversal,JSDocInfo,Node,Node,Node)"
    ],
    "Closure-104": [
        "com.google.javascript.rhino.jstype.UnionType.meet(JSType)"
    ],
    "JacksonDatabind-4": [
        "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer._deserializeCustom(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Jsoup-77": [
        "org.jsoup.parser.XmlTreeBuilder.popStackToClose(Token.EndTag)"
    ],
    "Time-27": [
        "org.joda.time.format.PeriodFormatterBuilder.toFormatter(List<Object>,boolean,boolean)"
    ],
    "Lang-43": [
        "org.apache.commons.lang.text.ExtendedMessageFormat.appendQuotedString(String,ParsePosition,StringBuffer,boolean)"
    ],
    "JxPath-19": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getRelativePositionByQName()",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getRelativePositionByQName()"
    ],
    "JacksonDatabind-39": [
        "com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "JacksonCore-26": [
        "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int)"
    ],
    "JacksonDatabind-54": [
        "com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean)"
    ],
    "Compress-34": [
        "org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength()"
    ],
    "Lang-58": [
        "org.apache.commons.lang.math.NumberUtils.createNumber(String)"
    ],
    "Mockito-7": [
        "org.mockito.internal.util.reflection.GenericMetadataSupport.TypeVariableReturnType.readTypeVariables()"
    ],
    "Closure-59": [
        "com.google.javascript.jscomp.Compiler.initOptions(CompilerOptions)"
    ],
    "JacksonDatabind-79": [
        "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectReferenceInfo(Annotated,ObjectIdInfo)",
        "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual(SerializerProvider,BeanProperty)"
    ],
    "JacksonDatabind-96": [
        "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addExplicitAnyCreator(DeserializationContext,BeanDescription,CreatorCollector,CreatorCandidate)"
    ],
    "Closure-18": [
        "com.google.javascript.jscomp.Compiler.parseInputs()"
    ],
    "Closure-91": [
        "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(NodeTraversal,Node,Node)"
    ],
    "Time-23": [
        "org.joda.time.DateTimeZone.getConvertedId(String)"
    ],
    "Math-5": [
        "org.apache.commons.math3.complex.Complex.reciprocal()"
    ],
    "Codec-3": [
        "org.apache.commons.codec.language.DoubleMetaphone.handleG(String,DoubleMetaphoneResult,int,boolean)"
    ],
    "Csv-3": [
        "org.apache.commons.csv.Lexer.readEscape()"
    ],
    "Math-70": [
        "org.apache.commons.math.analysis.solvers.BisectionSolver.solve(UnivariateRealFunction,double,double,double)"
    ],
    "Compress-39": [
        "org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)"
    ],
    "Math-59": [
        "org.apache.commons.math.util.FastMath.max(float,float)"
    ],
    "Jsoup-87": [
        "org.jsoup.parser.HtmlTreeBuilder.clearStackToContext(String)",
        "org.jsoup.parser.HtmlTreeBuilder.generateImpliedEndTags(String)",
        "org.jsoup.parser.HtmlTreeBuilder.getActiveFormattingElement(String)",
        "org.jsoup.parser.HtmlTreeBuilder.getFromStack(String)",
        "org.jsoup.parser.HtmlTreeBuilder.inSelectScope(String)",
        "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(String[],String[],String[])",
        "org.jsoup.parser.HtmlTreeBuilder.isSameFormattingElement(Element,Element)",
        "org.jsoup.parser.HtmlTreeBuilder.isSpecial(Element)",
        "org.jsoup.parser.HtmlTreeBuilder.popStackToBefore(String)",
        "org.jsoup.parser.HtmlTreeBuilder.popStackToClose(String)",
        "org.jsoup.parser.HtmlTreeBuilder.reconstructFormattingElements()",
        "org.jsoup.parser.HtmlTreeBuilder.resetInsertionMode()",
        "org.jsoup.parser.Tag.Tag(String)"
    ],
    "Gson-8": [
        "com.google.gson.internal.UnsafeAllocator.create()"
    ],
    "Codec-6": [
        "org.apache.commons.codec.binary.Base64InputStream.read(byte,int,int)"
    ],
    "Mockito-36": [
        "org.mockito.internal.invocation.Invocation.callRealMethod()"
    ],
    "JacksonXml-6": [],
    "Compress-29": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)",
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int,String)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short,int,String)",
        "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int,String)",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int,String)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)"
    ],
    "Jsoup-23": [
        "org.jsoup.parser.Tokeniser.consumeCharacterReference(Character,boolean)"
    ],
    "Closure-85": [
        "com.google.javascript.jscomp.UnreachableCodeElimination.computeFollowing(Node)",
        "com.google.javascript.jscomp.UnreachableCodeElimination.tryRemoveUnconditionalBranching(Node)"
    ],
    "Closure-67": [
        "com.google.javascript.jscomp.AnalyzePrototypeProperties.ProcessProperties.isPrototypePropertyAssign(Node)"
    ],
    "Closure-145": [
        "com.google.javascript.jscomp.CodeGenerator.isOneExactlyFunctionOrDo(Node)"
    ],
    "Math-79": [
        "org.apache.commons.math.util.MathUtils.distance(int[],int[])"
    ],
    "Jsoup-4": [
        "org.jsoup.nodes.Entities.unescape(String)"
    ],
    "Jsoup-56": [
        "org.jsoup.nodes.DocumentType.DocumentType(String,String,String,String)",
        "org.jsoup.nodes.DocumentType.outerHtmlHead(Appendable,int,Document.OutputSettings)",
        "org.jsoup.parser.Token.Doctype.reset()",
        "org.jsoup.parser.XmlTreeBuilder.insert(Token.Doctype)"
    ],
    "Jsoup-27": [
        "org.jsoup.helper.DataUtil.getCharsetFromContentType(String)"
    ],
    "Jsoup-40": [
        "org.jsoup.nodes.DocumentType.DocumentType(String,String,String,String)"
    ],
    "Math-45": [
        "org.apache.commons.math.linear.OpenMapRealMatrix.OpenMapRealMatrix(int,int)"
    ],
    "JacksonDatabind-111": [
        "com.fasterxml.jackson.databind.deser.CreatorProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.impl.FieldProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.impl.MethodProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.impl.SetterlessProperty.withValueDeserializer(JsonDeserializer<?>)",
        "com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer.getNullValue(DeserializationContext)"
    ],
    "Math-10": [
        "org.apache.commons.math3.analysis.differentiation.DSCompiler.atan2(double[],int,double[],int,double[],int)"
    ],
    "Lang-18": [
        "org.apache.commons.lang3.time.FastDateFormat.parsePattern()"
    ],
    "Jsoup-60": [
        "org.jsoup.parser.TokenQueue.chompBalanced(char,char)",
        "org.jsoup.select.QueryParser.parse(String)"
    ],
    "Closure-126": [
        "com.google.javascript.jscomp.MinimizeExitPoints.tryMinimizeExits(Node,int,String)"
    ],
    "Compress-47": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry)",
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)"
    ],
    "Math-49": [
        "org.apache.commons.math.linear.OpenMapRealVector.ebeDivide(RealVector)",
        "org.apache.commons.math.linear.OpenMapRealVector.ebeDivide(double[])",
        "org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(RealVector)",
        "org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(double[])"
    ],
    "Time-10": [
        "org.joda.time.base.BaseSingleFieldPeriod.between(ReadablePartial,ReadablePartial,ReadablePeriod)"
    ],
    "Lang-21": [
        "org.apache.commons.lang3.time.DateUtils.isSameLocalTime(Calendar,Calendar)"
    ],
    "Math-57": [
        "org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.chooseInitialCenters(Collection<T>,int,Random)"
    ],
    "JacksonDatabind-62": [
        "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(DeserializationContext,BeanProperty)"
    ],
    "Jsoup-41": [
        "org.jsoup.nodes.Element.equals(Object)"
    ],
    "JacksonDatabind-88": [
        "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(String,DatabindContext)"
    ],
    "Jsoup-33": [
        "org.jsoup.parser.HtmlTreeBuilder.insert(Token.StartTag)"
    ],
    "Math-6": [
        "org.apache.commons.math3.optim.BaseOptimizer.BaseOptimizer(ConvergenceChecker<PAIR>)",
        "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer.doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer.doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer.doOptimize()",
        "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.doOptimize()"
    ],
    "Lang-40": [
        "org.apache.commons.lang.StringUtils.containsIgnoreCase(String,String)"
    ],
    "JacksonCore-15": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()"
    ],
    "JxPath-6": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.equal(EvalContext,Expression,Expression)"
    ],
    "Closure-47": [
        "com.google.debugging.sourcemap.SourceMapConsumerV3.getOriginalMappingForEntry(Entry)"
    ],
    "Closure-6": [
        "com.google.javascript.jscomp.TypeValidator.expectCanAssignTo(NodeTraversal,Node,JSType,JSType,String)",
        "com.google.javascript.jscomp.TypeValidator.expectCanAssignToPropertyOf(NodeTraversal,Node,JSType,JSType,Node,String)"
    ],
    "JacksonDatabind-110": [
        "com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers.findForCollection(DeserializationContext,JavaType)"
    ],
    "Csv-14": [
        "org.apache.commons.csv.CSVFormat.printAndQuote(Object,CharSequence,int,int,Appendable,boolean)"
    ],
    "Jsoup-11": [
        "org.jsoup.select.Selector.findElements()",
        "org.jsoup.select.Selector.select()"
    ],
    "Gson-2": [
        "com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(Class<T1>,TypeAdapter<T1>)"
    ],
    "Compress-42": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink()"
    ],
    "JacksonDatabind-82": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(DeserializationContext,BeanDescription,BeanDeserializerBuilder)"
    ],
    "Compress-19": [
        "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)"
    ],
    "Math-90": [
        "org.apache.commons.math.stat.Frequency.addValue(Object)"
    ],
    "Cli-13": [
        "org.apache.commons.cli2.option.ArgumentImpl.processValues(WriteableCommandLine,ListIterator,Option)"
    ],
    "JacksonDatabind-32": [
        "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla.deserialize(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Jsoup-82": [
        "org.jsoup.helper.DataUtil.parseInputStream(InputStream,String,String,Parser)"
    ],
    "Math-40": [
        "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.doSolve()"
    ],
    "Closure-10": [
        "com.google.javascript.jscomp.NodeUtil.mayBeString(Node,boolean)"
    ],
    "Closure-62": [
        "com.google.javascript.jscomp.LightweightMessageFormatter.format(JSError,boolean)"
    ],
    "Mockito-3": [
        "org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(Invocation)"
    ],
    "Jsoup-31": [
        "org.jsoup.parser.XmlTreeBuilder.insert(Token.Comment)"
    ],
    "JacksonDatabind-102": [
        "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.createContextual(SerializerProvider,BeanProperty)"
    ],
    "Gson-12": [
        "com.google.gson.internal.bind.JsonTreeReader.skipValue()"
    ],
    "Codec-17": [
        "org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byte[])"
    ],
    "Closure-174": [
        "com.google.javascript.jscomp.JsAst.parse(AbstractCompiler)",
        "com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(CodingConvention,String,Node,JSDocInfo)",
        "com.google.javascript.jscomp.ScopedAliases.Traversal.findAliases(NodeTraversal)"
    ],
    "JacksonXml-3": [
        "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()"
    ],
    "Closure-142": [
        "com.google.javascript.jscomp.CoalesceVariableNames.enterScope(NodeTraversal)",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(JsDocToken,WhitespaceOption)"
    ],
    "Closure-110": [
        "com.google.javascript.jscomp.ScopedAliases.Traversal.findAliases(NodeTraversal)",
        "com.google.javascript.rhino.Node.getChildBefore(Node)"
    ],
    "Lang-54": [
        "org.apache.commons.lang.LocaleUtils.toLocale(String)"
    ],
    "Jsoup-16": [
        "org.jsoup.nodes.DocumentType.DocumentType(String,String,String,String)",
        "org.jsoup.nodes.DocumentType.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"
    ],
    "Csv-1": [
        "org.apache.commons.csv.ExtendedBufferedReader.read()"
    ],
    "Jsoup-67": [
        "org.jsoup.parser.HtmlTreeBuilder.inSpecificScope(String[],String[],String[])"
    ],
    "Time-26": [
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.add(long,int)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.add(long,long)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.addWrapField(long,int)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.roundCeiling(long)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.roundFloor(long)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,String,Locale)",
        "org.joda.time.chrono.ZonedChronology.ZonedDateTimeField.set(long,int)",
        "org.joda.time.field.LenientDateTimeField.set(long,int)"
    ],
    "Mockito-11": [
        "org.mockito.internal.creation.DelegatingMethod.equals(Object)",
        "org.mockito.internal.creation.DelegatingMethod.hashCode()"
    ],
    "Csv-11": [
        "org.apache.commons.csv.CSVParser.initializeHeader()"
    ],
    "Mockito-1": [
        "org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(Invocation)"
    ],
    "Lang-11": [
        "org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random)"
    ],
    "JxPath-8": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compute(Object,Object)"
    ],
    "JacksonDatabind-30": [
        "com.fasterxml.jackson.databind.ObjectMapper._convert(Object,JavaType)",
        "com.fasterxml.jackson.databind.ObjectMapper.valueToTree(Object)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent(JsonParser)"
    ],
    "Lang-23": [],
    "Closure-170": [
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate.getNumUseInUseCfgNode(Node)"
    ],
    "JacksonDatabind-22": [
        "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(SerializationConfig,ArrayType,BeanDescription,boolean,TypeSerializer,JsonSerializer<Object>)",
        "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(SerializationConfig,CollectionType,BeanDescription,boolean,TypeSerializer,JsonSerializer<Object>)",
        "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(SerializerProvider,JavaType,BeanDescription,boolean)",
        "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(SerializationConfig,MapType,BeanDescription,boolean,JsonSerializer<Object>,TypeSerializer,JsonSerializer<Object>)",
        "com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(SerializerProvider,JavaType,BeanDescription,boolean)"
    ],
    "JxPath-12": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(Node,NodeTest)"
    ],
    "JacksonDatabind-63": [
        "com.fasterxml.jackson.databind.JsonMappingException.Reference.getDescription()"
    ],
    "JxPath-4": [
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLanguage()",
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getValue()",
        "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.stringValue(Node)",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLanguage()",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getValue()"
    ],
    "Lang-22": [
        "org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(int,int)"
    ],
    "Closure-32": [
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(JsDocToken,WhitespaceOption)"
    ],
    "JxPath-5": [
        "org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer,int,NodePointer,int)"
    ],
    "Closure-96": [
        "com.google.javascript.jscomp.TypeCheck.visitParameterList(NodeTraversal,Node,FunctionType)"
    ],
    "JacksonDatabind-5": [
        "com.fasterxml.jackson.databind.introspect.AnnotatedClass._addMethodMixIns(Class<?>,AnnotatedMethodMap,Class<?>,AnnotatedMethodMap)"
    ],
    "Math-4": [
        "org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection(SubLine,boolean)",
        "org.apache.commons.math3.geometry.euclidean.twod.SubLine.intersection(SubLine,boolean)"
    ],
    "Closure-77": [
        "com.google.javascript.jscomp.CodeGenerator.strEscape(String,char,String,String,String,CharsetEncoder)"
    ],
    "JacksonDatabind-52": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(DeserializationContext)"
    ],
    "JacksonDatabind-3": [
        "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer._deserializeCustom(JsonParser,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Jsoup-49": [
        "org.jsoup.nodes.Node.addChildren(int,Node)"
    ],
    "Closure-98": [
        "com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock.BasicBlock(BasicBlock,Node)",
        "com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection.isAssignedOnceInLifetime()"
    ],
    "Chart-17": [
        "org.jfree.data.time.TimeSeries.clone()"
    ],
    "JacksonXml-5": [
        "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.XmlSerializerProvider(XmlSerializerProvider)"
    ],
    "JacksonDatabind-35": [
        "com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer._deserialize(JsonParser,DeserializationContext)"
    ],
    "Csv-4": [
        "org.apache.commons.csv.CSVParser.getHeaderMap()"
    ],
    "Jsoup-19": [
        "org.jsoup.safety.Whitelist.testValidProtocol(Element,Attribute,Set<Protocol>)"
    ],
    "Compress-4": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()",
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()",
        "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()",
        "org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)"
    ],
    "Closure-42": [
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processForInLoop(ForInLoop)"
    ],
    "Jsoup-10": [
        "org.jsoup.nodes.Node.absUrl(String)"
    ],
    "Closure-40": [
        "com.google.javascript.jscomp.NameAnalyzer.FindDeclarationsAndSetters.visit(NodeTraversal,Node,Node)"
    ],
    "Closure-69": [
        "com.google.javascript.jscomp.TypeCheck.visitCall(NodeTraversal,Node)"
    ],
    "JacksonDatabind-107": [
        "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(DeserializationContext,String)"
    ],
    "Mockito-17": [
        "org.mockito.internal.creation.MockSettingsImpl.isSerializable()",
        "org.mockito.internal.creation.MockSettingsImpl.serializable()",
        "org.mockito.internal.util.MockUtil.createMock(Class<T>,MockSettingsImpl)"
    ],
    "Compress-31": [
        "org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)"
    ],
    "Csv-10": [
        "org.apache.commons.csv.CSVPrinter.CSVPrinter(Appendable,CSVFormat)"
    ],
    "Closure-114": [
        "com.google.javascript.jscomp.NameAnalyzer.FindDependencyScopes.recordAssignment(NodeTraversal,Node,Node)"
    ],
    "Math-28": [
        "org.apache.commons.math3.optimization.linear.SimplexSolver.getPivotRow(SimplexTableau,int)"
    ],
    "Closure-65": [
        "com.google.javascript.jscomp.CodeGenerator.strEscape(String,char,String,String,String,CharsetEncoder)"
    ],
    "Closure-101": [
        "com.google.javascript.jscomp.CommandLineRunner.createOptions()"
    ],
    "Closure-27": [
        "com.google.javascript.rhino.IR.tryCatch(Node,Node)",
        "com.google.javascript.rhino.IR.tryFinally(Node,Node)"
    ],
    "Closure-166": [
        "com.google.javascript.rhino.jstype.PrototypeObjectType.matchConstraint(JSType)"
    ],
    "Compress-20": [
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean)",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()",
        "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean)"
    ],
    "Cli-16": [
        "org.apache.commons.cli2.commandline.WriteableCommandLineImpl.addOption(Option)",
        "org.apache.commons.cli2.option.GroupImpl.GroupImpl(List,String,String,int,int)"
    ],
    "JxPath-10": [
        "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.computeValue(EvalContext)"
    ],
    "Math-105": [
        "org.apache.commons.math.stat.regression.SimpleRegression.getSumSquaredErrors()"
    ],
    "Math-73": [
        "org.apache.commons.math.analysis.solvers.BrentSolver.solve(UnivariateRealFunction,double,double,double)"
    ],
    "Compress-44": [
        "org.apache.commons.compress.utils.ChecksumCalculatingInputStream.ChecksumCalculatingInputStream(Checksum,InputStream)"
    ],
    "Lang-12": [
        "org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char[],Random)"
    ],
    "Closure-14": [
        "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(Node,Node,ControlFlowAnalysis)"
    ],
    "Codec-1": [
        "org.apache.commons.codec.language.Caverphone.caverphone(String)",
        "org.apache.commons.codec.language.Metaphone.metaphone(String)",
        "org.apache.commons.codec.language.SoundexUtils.clean(String)"
    ],
    "Math-38": [
        "org.apache.commons.math.optimization.direct.BOBYQAOptimizer.prelim(double[],double[])"
    ],
    "Lang-13": [
        "org.apache.commons.lang3.SerializationUtils.ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(InputStream,ClassLoader)",
        "org.apache.commons.lang3.SerializationUtils.ClassLoaderAwareObjectInputStream.resolveClass(ObjectStreamClass)"
    ],
    "Lang-9": [
        "org.apache.commons.lang3.time.FastDateParser.init()"
    ],
    "Lang-1": [
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ],
    "Lang-29": [
        "org.apache.commons.lang3.SystemUtils.toJavaVersionInt(String)"
    ],
    "Cli-23": [
        "org.apache.commons.cli.HelpFormatter.renderWrappedText(StringBuffer,int,int,String)"
    ],
    "Gson-6": [
        "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)"
    ],
    "Closure-108": [
        "com.google.javascript.jscomp.ScopedAliases.Traversal.exitScope(NodeTraversal)",
        "com.google.javascript.jscomp.ScopedAliases.Traversal.findAliases(NodeTraversal)",
        "com.google.javascript.jscomp.ScopedAliases.Traversal.visit(NodeTraversal,Node,Node)"
    ],
    "Cli-35": [
        "org.apache.commons.cli.Options.getMatchingOptions(String)"
    ],
    "JacksonDatabind-33": [
        "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForSerialization(Annotated)"
    ],
    "Math-11": [
        "org.apache.commons.math3.distribution.MultivariateNormalDistribution.density(double[])"
    ],
    "JxPath-21": [
        "org.apache.commons.jxpath.ri.model.beans.PropertyPointer.getLength()"
    ],
    "Cli-15": [
        "org.apache.commons.cli2.commandline.WriteableCommandLineImpl.getValues(Option,List)"
    ],
    "Math-97": [
        "org.apache.commons.math.analysis.BrentSolver.solve(double,double)"
    ],
    "Mockito-37": [
        "org.mockito.internal.stubbing.answers.AnswersValidator.validate(Answer<?>,Invocation)"
    ],
    "JacksonDatabind-13": [
        "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.findObjectId(Object,ObjectIdGenerator<?>,ObjectIdResolver)",
        "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty.deserializeSetAndReturn(JsonParser,DeserializationContext,Object)"
    ],
    "Chart-16": [
        "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][])",
        "org.jfree.data.category.DefaultIntervalCategoryDataset.setCategoryKeys(Comparable[])"
    ],
    "JacksonDatabind-48": [
        "com.fasterxml.jackson.databind.DeserializationConfig.getDefaultVisibilityChecker()",
        "com.fasterxml.jackson.databind.SerializationConfig.getDefaultVisibilityChecker()"
    ],
    "Closure-105": [
        "com.google.javascript.jscomp.FoldConstants.tryFoldStringJoin(NodeTraversal,Node,Node,Node,Node)"
    ],
    "Mockito-25": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.answer(InvocationOnMock)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.getMock(InvocationOnMock)",
        "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.recordDeepStubMock(InvocationOnMock,InvocationContainerImpl)"
    ],
    "Math-42": [
        "org.apache.commons.math.optimization.linear.SimplexTableau.getSolution()"
    ],
    "Jsoup-48": [
        "org.jsoup.helper.HttpConnection.Response.processResponseHeaders(Map<String,List<String>>)"
    ],
    "Closure-3": [
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables.Candidate.canInline()",
        "com.google.javascript.jscomp.FlowSensitiveInlineVariables.enterScope(NodeTraversal)"
    ],
    "Math-39": [
        "org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator.integrate(ExpandableStatefulODE,double)"
    ],
    "Closure-122": [
        "com.google.javascript.jscomp.parsing.IRFactory.handleBlockComment(Comment)"
    ],
    "JacksonDatabind-23": [],
    "JacksonDatabind-69": [
        "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addDelegatingCreator(AnnotatedWithParams,boolean,SettableBeanProperty[])",
        "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addPropertyCreator(AnnotatedWithParams,boolean,SettableBeanProperty[])",
        "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.verifyNonDup(AnnotatedWithParams,int,boolean)"
    ],
    "Lang-26": [
        "org.apache.commons.lang3.time.FastDateFormat.format(Date)"
    ],
    "Math-21": [
        "org.apache.commons.math3.linear.RectangularCholeskyDecomposition.RectangularCholeskyDecomposition(RealMatrix,double)"
    ],
    "Compress-11": [
        "org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)"
    ],
    "Closure-87": [
        "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.isFoldableExpressBlock(Node)"
    ],
    "JacksonDatabind-77": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext,JavaType,BeanDescription)"
    ],
    "Closure-123": [
        "com.google.javascript.jscomp.CodeGenerator.add(Node,Context)"
    ],
    "Cli-26": [
        "org.apache.commons.cli.OptionBuilder.create(String)"
    ],
    "Lang-41": [
        "org.apache.commons.lang.ClassUtils.getPackageName(String)",
        "org.apache.commons.lang.ClassUtils.getShortClassName(String)"
    ],
    "Cli-20": [
        "org.apache.commons.cli.PosixParser.flatten(Options,String[],boolean)"
    ],
    "Mockito-14": [
        "org.mockito.internal.MockHandler.handle(Invocation)",
        "org.mockito.internal.MockitoCore.verify(T,VerificationMode)"
    ],
    "JacksonDatabind-103": [
        "com.fasterxml.jackson.databind.DatabindContext.resolveSubType(JavaType,String)",
        "com.fasterxml.jackson.databind.DeserializationContext.instantiationException(Class<?>,Throwable)",
        "com.fasterxml.jackson.databind.DeserializationContext.parseDate(String)",
        "com.fasterxml.jackson.databind.JsonMappingException.fromUnexpectedIOE(IOException)",
        "com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(Throwable,Reference)",
        "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(Class<?>)",
        "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(JavaType)",
        "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findTypeDeserializer(DeserializationConfig,JavaType)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(DeserializationContext,JavaType,BeanDescription)",
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBuilderBasedDeserializer(DeserializationContext,JavaType,BeanDescription)",
        "com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializationContext,DeserializerFactory,JavaType)",
        "com.fasterxml.jackson.databind.deser.SettableAnyProperty._throwAsIOE(Exception,Object,Object)",
        "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(JsonParser,Exception)",
        "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(JsonParser,Exception,Object)",
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDate(String,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer._weirdKey(DeserializationContext,String,Exception)",
        "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.deserializeKey(String,DeserializationContext)",
        "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapException(Throwable)",
        "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.instantiateBean(boolean)",
        "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._wrapAsIOE(JsonGenerator,Exception)",
        "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(Object)",
        "com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean)"
    ],
    "Gson-13": [
        "com.google.gson.stream.JsonReader.peekNumber()"
    ],
    "Closure-53": [
        "com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.replaceAssignmentExpression(Var,Reference,Map<String,String>)"
    ],
    "JacksonDatabind-6": [
        "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsISO8601(String,ParsePosition)"
    ],
    "Cli-3": [
        "org.apache.commons.cli.TypeHandler.createNumber(String)"
    ],
    "Lang-45": [
        "org.apache.commons.lang.WordUtils.abbreviate(String,int,int,String)"
    ],
    "Mockito-33": [
        "org.mockito.internal.invocation.InvocationMatcher.hasSameMethod(Invocation)"
    ],
    "JacksonCore-22": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2()",
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext)",
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()"
    ],
    "Lang-49": [
        "org.apache.commons.lang.math.Fraction.reduce()"
    ],
    "Mockito-21": [
        "org.mockito.internal.creation.instance.ConstructorInstantiator.newInstance(Class<T>)",
        "org.mockito.internal.creation.instance.ConstructorInstantiator.withOuterClass(Class<T>)"
    ],
    "Closure-74": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldComparison(Node,Node,Node)"
    ],
    "JacksonDatabind-44": [
        "com.fasterxml.jackson.databind.type.SimpleType._narrow(Class<?>)"
    ],
    "Lang-51": [
        "org.apache.commons.lang.BooleanUtils.toBoolean(String)"
    ],
    "Closure-52": [
        "com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(String)"
    ],
    "JacksonDatabind-97": [
        "com.fasterxml.jackson.databind.node.POJONode.serialize(JsonGenerator,SerializerProvider)"
    ],
    "JacksonDatabind-78": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext,JavaType,BeanDescription)"
    ],
    "Cli-9": [
        "org.apache.commons.cli.Parser.checkRequiredOptions()"
    ],
    "Jsoup-84": [
        "org.jsoup.helper.W3CDom.W3CBuilder.head(org.jsoup.nodes.Node,int)"
    ],
    "Closure-117": [
        "com.google.javascript.jscomp.TypeValidator.getReadableJSTypeName(Node,boolean)"
    ],
    "Closure-109": [
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseContextTypeExpression(JsDocToken)"
    ],
    "JacksonCore-1": [
        "com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String)",
        "com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)",
        "com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal()"
    ],
    "Compress-5": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)"
    ],
    "Time-11": [],
    "JacksonDatabind-67": [
        "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createKeyDeserializer(DeserializationContext,JavaType)"
    ],
    "Closure-138": [
        "com.google.javascript.jscomp.ClosureReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome(Node,FlowScope,boolean)",
        "com.google.javascript.jscomp.TypeInference.traverseName(Node,FlowScope)"
    ],
    "JacksonDatabind-65": [
        "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.deserializeKey(String,DeserializationContext)",
        "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findFactoryMethod(Class<?>)",
        "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.isFactoryMethod(AnnotatedMethod)"
    ],
    "Lang-24": [
        "org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ],
    "Closure-68": [
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(JsDocToken)",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseFunctionType(JsDocToken)"
    ],
    "Lang-31": [
        "org.apache.commons.lang3.StringUtils.containsAny(CharSequence,char[])"
    ],
    "Closure-141": [
        "com.google.javascript.jscomp.NodeUtil.canBeSideEffected(Node,Set<String>)",
        "com.google.javascript.jscomp.PureFunctionIdentifier.getCallableDefinitions(DefinitionProvider,Node)"
    ],
    "Jsoup-37": [
        "org.jsoup.nodes.Element.html()"
    ],
    "Closure-113": [
        "com.google.javascript.jscomp.ProcessClosurePrimitives.processRequireCall(NodeTraversal,Node,Node)"
    ],
    "Lang-3": [
        "org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ],
    "Compress-9": [
        "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)"
    ],
    "JxPath-17": [
        "org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.testAttr(Attr)",
        "org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator.JDOMAttributeIterator(NodePointer,QName)"
    ],
    "Codec-13": [
        "org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(String,String,boolean)"
    ],
    "Compress-15": [
        "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)"
    ],
    "Jsoup-71": [
        "org.jsoup.select.QueryParser.findElements()"
    ],
    "JacksonCore-5": [
        "com.fasterxml.jackson.core.JsonPointer._parseIndex(String)"
    ],
    "Csv-16": [
        "org.apache.commons.csv.CSVParser.CSVParser(Reader,CSVFormat,long,long)",
        "org.apache.commons.csv.CSVParser.iterator()"
    ],
    "Lang-34": [
        "org.apache.commons.lang3.builder.ToStringStyle.getRegistry()",
        "org.apache.commons.lang3.builder.ToStringStyle.isRegistered(Object)"
    ],
    "Math-87": [
        "org.apache.commons.math.optimization.linear.SimplexTableau.getBasicRow(int)"
    ],
    "Closure-23": [
        "com.google.javascript.jscomp.PeepholeFoldConstants.tryFoldArrayAccess(Node,Node,Node)"
    ],
    "Closure-25": [
        "com.google.javascript.jscomp.TypeInference.traverseNew(Node,FlowScope)"
    ],
    "Math-101": [
        "org.apache.commons.math.complex.ComplexFormat.parse(String,ParsePosition)"
    ],
    "Closure-41": [
        "com.google.javascript.jscomp.FunctionTypeBuilder.inferFromOverriddenFunction(FunctionType,Node)",
        "com.google.javascript.jscomp.FunctionTypeBuilder.inferParameterTypes(Node,JSDocInfo)"
    ],
    "Closure-132": [
        "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.tryMinimizeIf(Node)"
    ],
    "Closure-134": [
        "com.google.javascript.jscomp.AmbiguateProperties.Property.addNonUnionType(JSType)",
        "com.google.javascript.jscomp.AmbiguateProperties.PropertySubGraph.addNode(Property)",
        "com.google.javascript.jscomp.AmbiguateProperties.PropertySubGraph.isIndependentOf(Property)",
        "com.google.javascript.jscomp.AmbiguateProperties.process(Node,Node)",
        "com.google.javascript.jscomp.TypedScopeCreator.AbstractScopeBuilder.findOverriddenFunction(ObjectType,String)"
    ],
    "Closure-133": [
        "com.google.javascript.jscomp.parsing.JsDocInfoParser.getRemainingJSDocLine()"
    ],
    "JacksonDatabind-98": [
        "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.complete(JsonParser,DeserializationContext,PropertyValueBuffer,PropertyBasedCreator)"
    ],
    "Math-67": [
        "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.getFunctionValue()",
        "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer.getResult()"
    ],
    "Lang-60": [
        "org.apache.commons.lang.text.StrBuilder.contains(char)",
        "org.apache.commons.lang.text.StrBuilder.indexOf(char,int)"
    ],
    "Math-68": [
        "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer()",
        "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize()"
    ],
    "JacksonDatabind-47": [
        "com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(MapperConfig<?>,Annotated,JavaType)"
    ],
    "Mockito-31": [
        "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls.ThrowingInterceptor.formatMethodCall()"
    ],
    "Closure-84": [
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(Assignment)",
        "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processUnaryExpression(UnaryExpression)"
    ],
    "Codec-5": [
        "org.apache.commons.codec.binary.Base64.decode(byte[],int,int)"
    ],
    "Closure-119": [
        "com.google.javascript.jscomp.GlobalNamespace.BuildGlobalNamespace.collect(JSModule,Scope,Node)"
    ],
    "Closure-89": [
        "com.google.javascript.jscomp.CollapseProperties.updateSimpleDeclaration(String,Name,Ref)",
        "com.google.javascript.jscomp.GlobalNamespace.Name.canCollapseUnannotatedChildNames()"
    ],
    "JacksonDatabind-12": [
        "com.fasterxml.jackson.databind.deser.std.MapDeserializer.isCachable()"
    ],
    "JacksonDatabind-87": [
        "com.fasterxml.jackson.databind.util.StdDateFormat._clearFormats()",
        "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsISO8601(String,ParsePosition,boolean)"
    ],
    "Jsoup-13": [
        "org.jsoup.nodes.Node.hasAttr(String)"
    ],
    "Math-55": [
        "org.apache.commons.math.geometry.Vector3D.crossProduct(Vector3D,Vector3D)"
    ],
    "Jsoup-85": [
        "org.jsoup.nodes.Attribute.Attribute(String,String,Attributes)"
    ],
    "Closure-16": [
        "com.google.javascript.jscomp.ScopedAliases.AliasedTypeNode.AliasedTypeNode(Node,String)",
        "com.google.javascript.jscomp.ScopedAliases.AliasedTypeNode.applyAlias()",
        "com.google.javascript.jscomp.ScopedAliases.Traversal.fixTypeNode(Node)"
    ],
    "Closure-29": [
        "com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.isInlinableObject(List<Reference>)"
    ],
    "Time-4": [
        "org.joda.time.Partial.with(DateTimeFieldType,int)"
    ],
    "JacksonDatabind-64": [
        "com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean)"
    ],
    "Chart-5": [
        "org.jfree.data.xy.XYSeries.addOrUpdate(Number,Number)"
    ],
    "Compress-23": [
        "org.apache.commons.compress.archivers.sevenz.Coders.LZMADecoder.decode(InputStream,Coder,byte[])"
    ],
    "Mockito-5": [
        "org.mockito.internal.verification.VerificationOverTimeImpl.verify(VerificationData)"
    ],
    "Math-98": [
        "org.apache.commons.math.linear.BigMatrixImpl.operate(BigDecimal[])",
        "org.apache.commons.math.linear.RealMatrixImpl.operate(double[])"
    ],
    "JacksonCore-16": [
        "com.fasterxml.jackson.core.util.JsonParserSequence.JsonParserSequence(JsonParser[])",
        "com.fasterxml.jackson.core.util.JsonParserSequence.nextToken()"
    ],
    "Closure-131": [
        "com.google.javascript.rhino.TokenStream.isJSIdentifier(String)"
    ],
    "Jsoup-28": [
        "org.jsoup.nodes.Entities.unescape(String,boolean)",
        "org.jsoup.parser.Tokeniser.consumeCharacterReference(Character,boolean)"
    ],
    "JacksonDatabind-86": [],
    "Math-88": [
        "org.apache.commons.math.optimization.linear.SimplexTableau.getSolution()"
    ],
    "JacksonXml-1": [
        "com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()"
    ],
    "Jsoup-58": [
        "org.jsoup.Jsoup.isValid(String,Whitelist)",
        "org.jsoup.safety.Cleaner.isValid(Document)"
    ],
    "Cli-10": [
        "org.apache.commons.cli.Parser.setOptions(Options)"
    ],
    "Lang-50": [
        "org.apache.commons.lang.time.FastDateFormat.getDateInstance(int,TimeZone,Locale)",
        "org.apache.commons.lang.time.FastDateFormat.getDateTimeInstance(int,int,TimeZone,Locale)"
    ],
    "Mockito-35": [
        "org.mockito.Matchers.eq(T)",
        "org.mockito.Matchers.isA(Class<T>)",
        "org.mockito.Matchers.same(T)"
    ],
    "Math-3": [
        "org.apache.commons.math3.util.MathArrays.linearCombination(double[],double[])"
    ],
    "JacksonDatabind-72": [],
    "Jsoup-61": [
        "org.jsoup.nodes.Element.hasClass(String)"
    ],
    "Time-5": [
        "org.joda.time.Period.normalizedStandard(PeriodType)"
    ],
    "Closure-160": [
        "com.google.javascript.jscomp.Compiler.initOptions(CompilerOptions)"
    ],
    "JacksonDatabind-28": [
        "com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.ObjectDeserializer.deserialize(JsonParser,DeserializationContext)"
    ],
    "Lang-64": [
        "org.apache.commons.lang.enums.ValuedEnum.compareTo(Object)"
    ],
    "Jsoup-42": [
        "org.jsoup.nodes.FormElement.formData()"
    ],
    "Mockito-20": [
        "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(MockCreationSettings<T>,MockHandler)"
    ],
    "Time-18": [
        "org.joda.time.chrono.GJChronology.getDateTimeMillis(int,int,int,int,int,int,int)"
    ],
    "Closure-35": [
        "com.google.javascript.jscomp.TypeInference.inferPropertyTypesToMatchConstraint(JSType,JSType)"
    ],
    "Closure-28": [],
    "JxPath-15": [
        "org.apache.commons.jxpath.ri.axes.UnionContext.setPosition(int)"
    ],
    "Closure-162": [
        "com.google.javascript.jscomp.ScopedAliases.Traversal.enterScope(NodeTraversal)",
        "com.google.javascript.jscomp.ScopedAliases.Traversal.visit(NodeTraversal,Node,Node)"
    ],
    "Gson-15": [
        "com.google.gson.stream.JsonWriter.value(double)"
    ],
    "Math-27": [
        "org.apache.commons.math3.fraction.Fraction.percentageValue()"
    ],
    "Lang-59": [
        "org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(Object,int,char)"
    ],
    "Closure-151": [
        "com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags(String[],PrintStream)"
    ],
    "Cli-25": [
        "org.apache.commons.cli.HelpFormatter.renderWrappedText(StringBuffer,int,int,String)"
    ],
    "Closure-99": [
        "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(NodeTraversal,Node,Node)"
    ],
    "JacksonDatabind-15": [
        "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(SerializerProvider,JavaType)",
        "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer(SerializerProvider,BeanPropertyWriter)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.createContextual(SerializerProvider,BeanProperty)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty(Object)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.isEmpty(SerializerProvider,Object)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serialize(Object,JsonGenerator,SerializerProvider)",
        "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)",
        "com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)"
    ],
    "Closure-21": [
        "com.google.javascript.jscomp.CheckSideEffects.visit(NodeTraversal,Node,Node)"
    ],
    "Chart-3": [
        "org.jfree.data.time.TimeSeries.createCopy(int,int)"
    ],
    "Chart-4": [
        "org.jfree.chart.plot.XYPlot.getDataRange(ValueAxis)"
    ],
    "Chart-6": [
        "org.jfree.chart.util.ShapeList.equals(Object)"
    ],
    "Chart-7": [
        "org.jfree.data.time.TimePeriodValues.updateBounds(TimePeriod,int)"
    ],
    "Chart-8": [
        "org.jfree.data.time.Week.Week(Date,TimeZone)"
    ],
    "Chart-10": [
        "org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator.generateToolTipFragment(String)"
    ],
    "Chart-13": [
        "org.jfree.chart.block.BorderArrangement.arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)"
    ],
    "Chart-14": [
        "org.jfree.chart.plot.CategoryPlot.removeDomainMarker(int,Marker,Layer,boolean)",
        "org.jfree.chart.plot.CategoryPlot.removeRangeMarker(int,Marker,Layer,boolean)",
        "org.jfree.chart.plot.XYPlot.removeDomainMarker(int,Marker,Layer,boolean)",
        "org.jfree.chart.plot.XYPlot.removeRangeMarker(int,Marker,Layer,boolean)"
    ],
    "Chart-15": [
        "org.jfree.chart.plot.PiePlot.getMaximumExplodePercent()",
        "org.jfree.chart.plot.PiePlot.initialise(Graphics2D,Rectangle2D,PiePlot,Integer,PlotRenderingInfo)"
    ],
    "Chart-18": [
        "org.jfree.data.DefaultKeyedValues.removeValue(Comparable)",
        "org.jfree.data.DefaultKeyedValues.removeValue(int)",
        "org.jfree.data.DefaultKeyedValues2D.removeColumn(Comparable)"
    ],
    "Chart-19": [
        "org.jfree.chart.plot.CategoryPlot.getDomainAxisIndex(CategoryAxis)",
        "org.jfree.chart.plot.CategoryPlot.getRangeAxisIndex(ValueAxis)"
    ],
    "Chart-20": [
        "org.jfree.chart.plot.ValueMarker.ValueMarker(double,Paint,Stroke,Paint,Stroke,float)"
    ],
    "Chart-21": [
        "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(BoxAndWhiskerItem,Comparable,Comparable)",
        "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.updateBounds()"
    ],
    "Chart-22": [
        "org.jfree.data.KeyedObjects2D.getObject(Comparable,Comparable)",
        "org.jfree.data.KeyedObjects2D.removeColumn(Comparable)",
        "org.jfree.data.KeyedObjects2D.removeObject(Comparable,Comparable)",
        "org.jfree.data.KeyedObjects2D.removeRow(Comparable)"
    ],
    "Chart-23": [],
    "Chart-24": [
        "org.jfree.chart.renderer.GrayPaintScale.getPaint(double)"
    ],
    "Chart-25": [
        "org.jfree.chart.renderer.category.StatisticalBarRenderer.drawHorizontalItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,StatisticalCategoryDataset,int,int)",
        "org.jfree.chart.renderer.category.StatisticalBarRenderer.drawVerticalItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,StatisticalCategoryDataset,int,int)"
    ],
    "Chart-26": [
        "org.jfree.chart.axis.Axis.drawLabel(String,Graphics2D,Rectangle2D,Rectangle2D,RectangleEdge,AxisState,PlotRenderingInfo)"
    ],
    "Cli-37": [
        "org.apache.commons.cli.DefaultParser.isShortOption(String)"
    ],
    "Cli-38": [
        "org.apache.commons.cli.DefaultParser.isShortOption(String)"
    ],
    "Jsoup-45": [
        "org.jsoup.parser.HtmlTreeBuilder.resetInsertionMode()"
    ]
}