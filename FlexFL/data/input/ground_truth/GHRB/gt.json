{
    "iBotPeaches_Apktool-3113": [
        "brut.androlib.res.AndrolibResources.mapSdkShorthandToVersion(String)"
    ],
    "FasterXML_jackson-databind-3418": [
        "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._deserializeFromString(JsonParser,DeserializationContext,String)",
        "com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer.handleNonArray(JsonParser,DeserializationContext,Collection<String>)"
    ],
    "FasterXML_jackson-databind-3868": [
        "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(JsonParser,DeserializationContext)"
    ],
    "FasterXML_jackson-databind-3962": [
        "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseString(JsonParser,DeserializationContext,NullValueProvider)"
    ],
    "FasterXML_jackson-databind-4050": [
        "com.fasterxml.jackson.databind.ObjectMapper.valueToTree(Object)"
    ],
    "FasterXML_jackson-databind-4320": [
        "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._deserializeWithObjectId(JsonParser,DeserializationContext,Collection<Object>)",
        "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._tryToAddNull(JsonParser,DeserializationContext,Collection<?>)",
        "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleNonArray(JsonParser,DeserializationContext,Collection<Object>)"
    ],
    "FasterXML_jackson-databind-4467": [
        "com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean)"
    ],
    "seata_seata-4056": [
        "io.seata.common.util.DurationUtil.doParse(String,String)",
        "io.seata.common.util.DurationUtil.parse(String)",
        "io.seata.rm.tcc.config.TCCFenceConfig.initCleanTask()",
        "io.seata.server.coordinator.DefaultCoordinator.timeoutCheck()"
    ],
    "seata_seata-5120": [],
    "apache_dubbo-11561": [
        "org.apache.dubbo.common.utils.SerializeSecurityConfigurator.checkClass(Set<Class<?>>,Class<?>)",
        "org.apache.dubbo.common.utils.SerializeSecurityConfigurator.checkType(Set<Class<?>>,Type)",
        "org.apache.dubbo.common.utils.SerializeSecurityConfigurator.registerInterface(Class<?>)"
    ],
    "Hakky54_sslcontext-kickstart-122": [
        "nl.altindag.ssl.hostnameverifier.UnsafeHostNameVerifier.verify(String,SSLSession)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkClientTrusted(X509Certificate[],String)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkClientTrusted(X509Certificate[],String,SSLEngine)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkClientTrusted(X509Certificate[],String,Socket)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkServerTrusted(X509Certificate[],String)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkServerTrusted(X509Certificate[],String,SSLEngine)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.checkServerTrusted(X509Certificate[],String,Socket)",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.extractPrincipals(X509Certificate[])",
        "nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager.logCertificate(X509Certificate[],String)"
    ],
    "Hakky54_sslcontext-kickstart-167": [
        "nl.altindag.ssl.util.CertificateUtils.generateAlias(Certificate)"
    ],
    "Hakky54_sslcontext-kickstart-197": [
        "nl.altindag.ssl.util.TrustManagerUtils.TrustManagerBuilder.build()"
    ],
    "Hakky54_sslcontext-kickstart-203": [
        "nl.altindag.ssl.util.KeyStoreUtils.loadSystemKeyStores()"
    ],
    "Hakky54_sslcontext-kickstart-217": [
        "nl.altindag.ssl.util.TrustManagerUtils.TrustManagerBuilder.build()",
        "nl.altindag.ssl.util.TrustManagerUtils.unwrapIfPossible(X509ExtendedTrustManager)"
    ],
    "Hakky54_sslcontext-kickstart-234": [
        "nl.altindag.ssl.hostnameverifier.FenixHostnameVerifier.getSubjectAltNames(X509Certificate,int)",
        "nl.altindag.ssl.hostnameverifier.FenixHostnameVerifier.toAbsolute(String)"
    ],
    "square_retrofit-3759": [
        "retrofit2.RequestFactory.Builder.parseParameterAnnotation(int,Type,Annotation[],Annotation)"
    ],
    "google_gson-2060": [
        "com.google.gson.Gson.Gson(Excluder,FieldNamingStrategy,Map<Type,InstanceCreator<?>>,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,LongSerializationPolicy,String,int,int,List<TypeAdapterFactory>,List<TypeAdapterFactory>,List<TypeAdapterFactory>,ToNumberStrategy,ToNumberStrategy)",
        "com.google.gson.internal.$Gson$Types.resolve(Type,Class<?>,Type,Map<TypeVariable<?>,Type>)",
        "com.google.gson.internal.$Gson$Types.resolveTypeVariable(Type,Class<?>,TypeVariable<?>)",
        "com.google.gson.stream.JsonWriter.value(Number)"
    ],
    "google_gson-2061": [
        "com.google.gson.internal.$Gson$Types.canonicalize(Type)",
        "com.google.gson.internal.bind.JsonTreeReader.hasNext()",
        "com.google.gson.stream.JsonReader.hasNext()"
    ],
    "google_gson-2071": [
        "com.google.gson.internal.$Gson$Types.equals(Type,Type)",
        "com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(Type,Class<? super T>)"
    ],
    "google_gson-2130": [],
    "google_gson-2134": [
        "com.google.gson.internal.$Gson$Types.getRawType(Type)",
        "com.google.gson.internal.bind.util.ISO8601Utils.parse(String,ParsePosition)"
    ],
    "google_gson-2153": [
        "com.google.gson.Gson.getAdapter(TypeToken<T>)"
    ],
    "google_gson-2158": [
        "com.google.gson.Gson.doubleAdapter(boolean)",
        "com.google.gson.Gson.floatAdapter(boolean)",
        "com.google.gson.internal.$Gson$Types.equals(Type,Type)",
        "com.google.gson.internal.$Gson$Types.getGenericSupertype(Type,Class<?>,Class<?>)",
        "com.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(Type,Class<?>)",
        "com.google.gson.internal.$Gson$Types.resolve(Type,Class<?>,Type)",
        "com.google.gson.internal.$Gson$Types.resolve(Type,Class<?>,Type,Map<TypeVariable<?>,Type>)",
        "com.google.gson.internal.$Gson$Types.typeToString(Type)"
    ],
    "google_gson-2214": [
        "com.google.gson.GsonBuilder.setVersion(double)",
        "com.google.gson.internal.Excluder.isValidSince(Since)",
        "com.google.gson.internal.Excluder.isValidUntil(Until)"
    ],
    "google_gson-2364": [
        "com.google.gson.JsonPrimitive.equals(Object)"
    ],
    "google_gson-2376": [
        "com.google.gson.reflect.TypeToken.getTypeTokenTypeArgument()"
    ],
    "google_gson-2410": [
        "com.google.gson.internal.TroubleshootingGuide.createUrl(String)"
    ],
    "google_gson-2420": [
        "com.google.gson.internal.$Gson$Types.subtypeOf(Type)",
        "com.google.gson.internal.ConstructorConstructor.checkInstantiable(Class<?>)"
    ],
    "alibaba_nacos-8202": [
        "com.alibaba.nacos.client.config.impl.ClientWorker.ConfigRpcTransportClient.getName()",
        "com.alibaba.nacos.client.config.impl.ServerListManager.ServerListManager(List<String>,String)",
        "com.alibaba.nacos.client.config.impl.ServerListManager.ServerListManager(Properties)",
        "com.alibaba.nacos.client.config.impl.ServerListManager.ServerListManager(String,String)",
        "com.alibaba.nacos.client.config.impl.ServerListManager.ServerListManager(String,int)",
        "com.alibaba.nacos.common.remote.client.RpcClient.RpcClient(String,ServerListFactory)",
        "com.alibaba.nacos.common.remote.client.RpcClient.clientAbilities(ClientAbilities)",
        "com.alibaba.nacos.common.remote.client.RpcClientFactory.createClient(String,ConnectionType,Integer,Integer,Map<String,String>)",
        "com.alibaba.nacos.common.remote.client.RpcClientFactory.createClusterClient(String,ConnectionType,Integer,Integer,Map<String,String>)"
    ],
    "alibaba_nacos-9024": [
        "com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler.checkCipher(String)",
        "com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler.decryptHandler(String,String,String)",
        "com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler.encryptHandler(String,String)",
        "com.alibaba.nacos.plugin.encryption.handler.EncryptionHandler.parseAlgorithmName(String)"
    ],
    "alibaba_nacos-9080": [
        "com.alibaba.nacos.common.remote.client.RpcClient.healthCheck()"
    ],
    "alibaba_nacos-9239": [
        "com.alibaba.nacos.naming.consistency.ephemeral.distro.v2.DistroClientDataProcessor.getVerifyData()"
    ],
    "alibaba_nacos-10755": [
        "com.alibaba.nacos.config.server.service.AggrWhitelist.load(String)",
        "com.alibaba.nacos.config.server.service.ConfigCacheService.dumpChange(String,String,String,String,long,String)",
        "com.alibaba.nacos.config.server.service.ConfigCacheService.dumpTag(String,String,String,String,String,long,String)",
        "com.alibaba.nacos.config.server.service.ConfigCacheService.dumpWithMd5(String,String,String,String,String,long,String,String)",
        "com.alibaba.nacos.config.server.service.SwitchService.load(String)",
        "com.alibaba.nacos.config.server.service.dump.DumpService.dumpConfigInfo(DumpAllProcessor)",
        "com.alibaba.nacos.config.server.service.dump.DumpService.dumpOperate(DumpProcessor,DumpAllProcessor,DumpAllBetaProcessor,DumpAllTagProcessor)",
        "com.alibaba.nacos.config.server.service.dump.DumpService.isQuickStart()",
        "com.alibaba.nacos.config.server.service.dump.processor.DumpProcessor.process(NacosTask)",
        "com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedConfigInfoPersistServiceImpl.findChangeConfig(Timestamp,Timestamp)",
        "com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedHistoryConfigInfoPersistServiceImpl.convertDeletedConfig(List<Map<String,Object>>)",
        "com.alibaba.nacos.config.server.service.repository.embedded.EmbeddedHistoryConfigInfoPersistServiceImpl.findDeletedConfig(Timestamp,Timestamp)",
        "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalConfigInfoPersistServiceImpl.convertChangeConfig(List<Map<String,Object>>)",
        "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalConfigInfoPersistServiceImpl.findChangeConfig(Timestamp,Timestamp)",
        "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalConfigInfoPersistServiceImpl.findConfigInfo(String,String,String)",
        "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalHistoryConfigInfoPersistServiceImpl.convertDeletedConfig(List<Map<String,Object>>)",
        "com.alibaba.nacos.config.server.service.repository.extrnal.ExternalHistoryConfigInfoPersistServiceImpl.findDeletedConfig(Timestamp,Timestamp)"
    ],
    "alibaba_nacos-10958": [
        "com.alibaba.nacos.common.remote.client.RpcClient.asyncRequest(Request,RequestCallBack)",
        "com.alibaba.nacos.common.remote.client.RpcClient.request(Request,long)",
        "com.alibaba.nacos.common.remote.client.RpcClient.requestFuture(Request)",
        "com.alibaba.nacos.common.remote.client.RpcClient.start()"
    ],
    "assertj_assertj-2364": [
        "org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(String,Object)"
    ],
    "assertj_assertj-2445": [
        "org.assertj.core.presentation.StandardRepresentation.hasOverriddenToString(Class<?>)",
        "org.assertj.core.presentation.StandardRepresentation.hasOverriddenToStringInSubclassOf(Class<?>,Class<?>)",
        "org.assertj.core.presentation.StandardRepresentation.toStringOf(Class<?>)"
    ],
    "assertj_assertj-2549": [
        "org.assertj.core.internal.Maps.clone(Map<K,V>)"
    ],
    "assertj_assertj-2685": [
        "org.assertj.core.internal.Strings.assertContainsIgnoringCase(AssertionInfo,CharSequence,CharSequence)",
        "org.assertj.core.internal.Strings.assertDoesNotContainIgnoringCase(AssertionInfo,CharSequence,CharSequence)",
        "org.assertj.core.internal.Strings.assertDoesNotEndWithIgnoringCase(AssertionInfo,CharSequence,CharSequence)",
        "org.assertj.core.internal.Strings.assertDoesNotStartWithIgnoringCase(AssertionInfo,CharSequence,CharSequence)",
        "org.assertj.core.internal.Strings.assertEndsWithIgnoringCase(AssertionInfo,CharSequence,CharSequence)",
        "org.assertj.core.internal.Strings.assertStartsWithIgnoringCase(AssertionInfo,CharSequence,CharSequence)"
    ],
    "apache_rocketmq-4071": [
        "org.apache.rocketmq.store.queue.BatchConsumeQueue.getOffsetInQueueByTime(long)"
    ],
    "apache_rocketmq-4457": [
        "org.apache.rocketmq.acl.plain.PlainAccessValidator.parse(RemotingCommand,String)"
    ],
    "apache_rocketmq-4569": [
        "org.apache.rocketmq.store.ConsumeQueue.correctMinOffset(long)"
    ],
    "apache_rocketmq-4822": [
        "org.apache.rocketmq.broker.processor.ChangeInvisibleTimeProcessor.appendCheckPoint(ChangeInvisibleTimeRequestHeader,int,int,long,long,String)",
        "org.apache.rocketmq.broker.processor.PopBufferMergeService.putAckToStore(PopCheckPointWrapper,byte)",
        "org.apache.rocketmq.broker.processor.PopBufferMergeService.putCkToStore(PopCheckPointWrapper,boolean)",
        "org.apache.rocketmq.broker.processor.PopMessageProcessor.popMsgFromQueue(boolean,GetMessageResult,PopMessageRequestHeader,int,long,int,Channel,long,ExpressionMessageFilter,StringBuilder,StringBuilder,StringBuilder)",
        "org.apache.rocketmq.broker.processor.PopReviveService.reviveRetry(PopCheckPoint,MessageExt)"
    ],
    "apache_rocketmq-5286": [
        "org.apache.rocketmq.broker.BrokerStartup.createBrokerController(String[])",
        "org.apache.rocketmq.container.BrokerContainerStartup.createBrokerContainer(String[])"
    ],
    "apache_rocketmq-6124": [
        "org.apache.rocketmq.tieredstore.container.TieredContainerManager.getIndexFile(TieredMessageStoreConfig)",
        "org.apache.rocketmq.tieredstore.container.TieredContainerManager.getInstance(TieredMessageStoreConfig)",
        "org.apache.rocketmq.tieredstore.container.TieredFileQueue.loadFromMetadata()",
        "org.apache.rocketmq.tieredstore.provider.posix.PosixFileSegment.destroyFile()",
        "org.apache.rocketmq.tieredstore.util.TieredStoreUtil.getMetadataStore(TieredMessageStoreConfig)"
    ],
    "apache_rocketmq-6184": [
        "org.apache.rocketmq.broker.processor.PopMessageProcessor.processRequest(Channel,RemotingCommand)",
        "org.apache.rocketmq.broker.processor.PopReviveService.run()",
        "org.apache.rocketmq.store.metrics.DefaultStoreMetricsManager.init(Meter,Supplier<AttributesBuilder>,DefaultMessageStore)"
    ],
    "apache_rocketmq-6618": [
        "org.apache.rocketmq.broker.BrokerController.initialize()",
        "org.apache.rocketmq.broker.BrokerController.start()",
        "org.apache.rocketmq.broker.controller.ReplicasManager.getConfirmOffset()",
        "org.apache.rocketmq.broker.controller.ReplicasManager.sendHeartbeatToController()",
        "org.apache.rocketmq.broker.controller.ReplicasManager.setIsolatedAndBrokerPermission(boolean)",
        "org.apache.rocketmq.store.CommitLog.asyncPutMessages(MessageExtBatch)",
        "org.apache.rocketmq.store.CommitLog.getConfirmOffset()",
        "org.apache.rocketmq.store.CommitLog.recoverAbnormally(long)",
        "org.apache.rocketmq.store.CommitLog.recoverNormally(long)",
        "org.apache.rocketmq.store.CommitLog.setConfirmOffset(long)",
        "org.apache.rocketmq.store.CommitLog.updateMaxMessageSize(PutMessageThreadLocal)",
        "org.apache.rocketmq.store.DefaultMessageStore.ReputMessageService.isCommitLogAvailable()",
        "org.apache.rocketmq.store.DefaultMessageStore.getConfirmOffset()",
        "org.apache.rocketmq.store.DefaultMessageStore.load()",
        "org.apache.rocketmq.store.RunningFlags.isReadable()",
        "org.apache.rocketmq.store.StoreCheckpoint.StoreCheckpoint(String)",
        "org.apache.rocketmq.store.StoreCheckpoint.flush()",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAClient.HAClientReader.processReadResult(ByteBuffer)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAClient.init()",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAConnection.AbstractWriteSocketService.buildTransferHeaderBuffer(long,int)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.changeToMaster(int)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.computeConfirmOffset()",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.getConfirmOffset()",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.maybeExpandInSyncStateSet(Long,long)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.setSyncStateSet(Set<Long>)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.updateConfirmOffset(long)",
        "org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService.updateConfirmOffsetWhenSlaveAck(Long)"
    ],
    "apache_rocketmq-6651": [
        "org.apache.rocketmq.tieredstore.TieredMessageStore.getMessageAsync(String,String,int,long,int,MessageFilter)"
    ],
    "apache_rocketmq-6786": [
        "org.apache.rocketmq.proxy.service.sysmessage.HeartbeatSyncer.consumeMessage(List<MessageExt>,ConsumeConcurrentlyContext)"
    ],
    "apache_rocketmq-6829": [
        "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity.queryAssignment(ProxyContext,QueryAssignmentRequest)"
    ],
    "apache_rocketmq-6909": [
        "org.apache.rocketmq.proxy.service.route.ClusterTopicRouteService.getBrokerAddr(ProxyContext,String)"
    ],
    "apache_rocketmq-7027": [
        "org.apache.rocketmq.proxy.service.route.ClusterTopicRouteService.getBrokerAddr(ProxyContext,String)"
    ],
    "apache_rocketmq-7048": [
        "org.apache.rocketmq.remoting.netty.NettyRemotingClient.invokeOneway(String,RemotingCommand,long)"
    ],
    "apache_rocketmq-7073": [
        "org.apache.rocketmq.broker.client.ProducerManager.scanNotActiveChannel()"
    ],
    "apache_rocketmq-7209": [
        "org.apache.rocketmq.broker.processor.AdminBrokerProcessor.deleteTopic(ChannelHandlerContext,RemotingCommand)"
    ],
    "apache_rocketmq-7346": [
        "org.apache.rocketmq.tieredstore.file.TieredFlatFile.getFileByTime(long,BoundaryType)"
    ],
    "apache_rocketmq-7712": [
        "org.apache.rocketmq.common.UtilAll.split(String,String)"
    ],
    "apache_rocketmq-7863": [
        "org.apache.rocketmq.client.impl.MQClientAPIImpl.buildQueueOffsetSortedMap(String,List<MessageExt>)",
        "org.apache.rocketmq.client.impl.MQClientAPIImpl.processPopResponse(String,RemotingCommand,String,CommandCustomHeader)"
    ],
    "apache_rocketmq-7917": [
        "org.apache.rocketmq.acl.plain.PlainAccessResource.parse(RemotingCommand,String)"
    ],
    "apache_rocketmq-7960": [
        "org.apache.rocketmq.proxy.service.metadata.ClusterMetadataService.findOneBroker(String)"
    ],
    "apache_rocketmq-7964": [
        "org.apache.rocketmq.broker.processor.ConsumerManageProcessor.updateConsumerOffset(ChannelHandlerContext,RemotingCommand)"
    ],
    "apache_rocketmq-8027": [
        "org.apache.rocketmq.client.impl.MQClientAPIImpl.getTopicRouteInfoFromNameServer(String,long,boolean)"
    ],
    "apache_rocketmq-8054": [
        "org.apache.rocketmq.broker.processor.SendMessageProcessor.handlePutMessageResult(PutMessageResult,RemotingCommand,RemotingCommand,MessageExt,SendMessageResponseHeader,SendMessageContext,ChannelHandlerContext,int,long,TopicQueueMappingContext,TopicMessageType)"
    ],
    "jhy_jsoup-1763": [
        "org.jsoup.safety.Safelist.Safelist(Safelist)"
    ],
    "jhy_jsoup-1848": [
        "org.jsoup.helper.W3CDom.W3CBuilder.W3CBuilder(Document)",
        "org.jsoup.helper.W3CDom.W3CBuilder.head(org.jsoup.nodes.Node,int)",
        "org.jsoup.helper.W3CDom.namespaceAware(boolean)"
    ],
    "jhy_jsoup-1871": [
        "org.jsoup.safety.Safelist.Safelist()",
        "org.jsoup.safety.Safelist.addAttributes(String,String)",
        "org.jsoup.safety.Safelist.isSafeAttribute(String,Element,Attribute)"
    ],
    "jhy_jsoup-1950": [
        "org.jsoup.parser.HtmlTreeBuilder.insert(Token.StartTag)",
        "org.jsoup.parser.HtmlTreeBuilder.insertEmpty(Token.StartTag)",
        "org.jsoup.parser.HtmlTreeBuilder.insertForm(Token.StartTag,boolean,boolean)",
        "org.jsoup.parser.HtmlTreeBuilder.insertStartTag(String)"
    ],
    "jhy_jsoup-2010": [
        "org.jsoup.nodes.FormElement.formData()"
    ],
    "FasterXML_jackson-core-883": [
        "com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext)"
    ],
    "FasterXML_jackson-core-923": [
        "com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int)",
        "com.fasterxml.jackson.core.util.TextBuffer.append(char)",
        "com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int)"
    ],
    "FasterXML_jackson-core-1053": [
        "com.fasterxml.jackson.core.Version.compareTo(Version)",
        "com.fasterxml.jackson.core.Version.equals(Object)",
        "com.fasterxml.jackson.core.Version.hashCode()"
    ],
    "FasterXML_jackson-dataformat-xml-544": [
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String)",
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int)",
        "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int)"
    ],
    "checkstyle_checkstyle-10839": [
        "com.puppycrawl.tools.checkstyle.checks.metrics.AbstractClassCouplingCheck.ClassContext.visitType(DetailAST)",
        "com.puppycrawl.tools.checkstyle.utils.CheckUtil.createFullType(DetailAST)"
    ],
    "checkstyle_checkstyle-10840": [
        "com.puppycrawl.tools.checkstyle.utils.CheckUtil.getAccessModifierFromModifiersToken(DetailAST)",
        "com.puppycrawl.tools.checkstyle.utils.CheckUtil.getAccessModifierFromModifiersTokenDirectly(DetailAST)",
        "com.puppycrawl.tools.checkstyle.utils.CheckUtil.getSurroundingAccessModifier(DetailAST)"
    ],
    "checkstyle_checkstyle-10958": [
        "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(DetailAST)"
    ],
    "checkstyle_checkstyle-10963": [
        "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance(DetailAST)"
    ],
    "checkstyle_checkstyle-10967": [
        "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck.getRightNode(DetailAST)"
    ],
    "checkstyle_checkstyle-11020": [
        "com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck.visitToken(DetailAST)"
    ],
    "checkstyle_checkstyle-11085": [
        "com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck.visitToken(DetailAST)"
    ],
    "checkstyle_checkstyle-11270": [
        "com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.checkEnumDef(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.getAcceptableTokens()",
        "com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.visitToken(DetailAST)"
    ],
    "checkstyle_checkstyle-11383": [
        "com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck.visitJavadocToken(DetailNode)"
    ],
    "checkstyle_checkstyle-11468": [
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.ClassDesc(String,int,DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.getClassAst()",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.getDepth()",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.getQualifiedName()",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.isWithAnonymousInnerClass()",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.ClassDesc.registerAnonymousInnerClass()",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.beginTree(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.doesNameOfClassMatchAnonymousInnerClassName(DetailAST,ClassDesc)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.getClassDeclarationNameMatchingCountDiff(String,ClassDesc,ClassDesc)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.getNearestClassWithSameName(String,String)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.getQualifiedClassName(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.leaveToken(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.registerNestedSubclassToOuterSuperClasses(String,ClassDesc)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.shouldBeDeclaredAsFinal(ClassDesc)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.visitClass(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.visitCtor(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck.visitToken(DetailAST)"
    ],
    "checkstyle_checkstyle-11926": [
        "com.puppycrawl.tools.checkstyle.utils.BlockCommentPosition.isOnConstructor(DetailAST)"
    ],
    "checkstyle_checkstyle-12372": [
        "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getIdentLastToken(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getPrecedingDot(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck.getPreviousNodeWithParentOfTypeAst(DetailAST,DetailAST)"
    ],
    "checkstyle_checkstyle-12444": [
        "com.puppycrawl.tools.checkstyle.api.AutomaticBean.RelaxedAccessModifierArrayConverter.convert(Class,Object)",
        "com.puppycrawl.tools.checkstyle.api.AutomaticBean.RelaxedStringArrayConverter.convert(Class,Object)"
    ],
    "checkstyle_checkstyle-12831": [
        "com.puppycrawl.tools.checkstyle.checks.modifier.ClassMemberImpliedModifierCheck.isInTypeBlock(DetailAST)"
    ],
    "checkstyle_checkstyle-14497": [
        "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.isGenericBeforeCtor(DetailAST)",
        "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.processSingleGeneric(DetailAST,int[],int)",
        "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.processStart(DetailAST)"
    ],
    "OpenAPITools_openapi-generator-13996": [
        "org.openapitools.codegen.languages.PythonClientCodegen.preprocessOpenAPI(OpenAPI)"
    ],
    "OpenAPITools_openapi-generator-14433": [
        "org.openapitools.codegen.DefaultGenerator.generateSupportingFiles(List<File>,Map<String,Object>)"
    ],
    "OpenAPITools_openapi-generator-14536": [
        "org.openapitools.codegen.DefaultCodegen.fromSecurity(Map<String,SecurityScheme>)"
    ],
    "OpenAPITools_openapi-generator-14768": [
        "org.openapitools.codegen.languages.Swift5ClientCodegen.Swift5ClientCodegen()",
        "org.openapitools.codegen.languages.Swift5ClientCodegen.toModelName(String)"
    ],
    "OpenAPITools_openapi-generator-16050": [
        "org.openapitools.codegen.DefaultCodegen.fromProperty(String,Schema,boolean,boolean)"
    ],
    "OpenAPITools_openapi-generator-17759": [
        "org.openapitools.codegen.languages.AbstractJavaCodegen.getNumberBeanValidation(Schema<?>)"
    ],
    "OpenAPITools_openapi-generator-18338": [
        "org.openapitools.codegen.languages.AbstractJavaCodegen.AbstractJavaCodegen()",
        "org.openapitools.codegen.languages.AbstractJavaCodegen.toEnumVarName(String,String)"
    ],
    "OpenAPITools_openapi-generator-18379": [
        "org.openapitools.codegen.languages.AbstractJavaCodegen.getBeanValidation(Schema<?>)"
    ],
    "OpenAPITools_openapi-generator-18478": [
        "org.openapitools.codegen.utils.ModelUtils.shouldIgnoreBeanValidation(Schema)"
    ]
}