{
    "title": "Non-blocking parser reports incorrect locations when fed with non-zero offset",
    "description": "\nWhen feeding a non-blocking parser, the input array offset leaks into the offsets reported by getCurrentLocation() and getTokenLocation().\nFor example, feeding with an offset of 7 yields tokens whose reported locations are 7 greater than they should be. Likewise the current location reported by the parser is 7 greater than the correct location.\nIt's not possible for a user to work around this issue by subtracting 7 from the reported locations, because the token location may have been established by an earlier feeding with a different offset.\nJackson version: 2.9.8\nUnit test:\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.async.ByteArrayFeeder;\nimport org.junit.Test;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.junit.Assert.assertEquals;\n\npublic class FeedingOffsetTest {\n\n  @Test\n  public void inputOffsetShouldNotAffectLocations() throws Exception {\n    JsonFactory jsonFactory = new JsonFactory();\n    JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();\n    ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();\n\n    byte[] input = \"[[[\".getBytes(UTF_8);\n\n    feeder.feedInput(input, 2, 3);\n    assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n    assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3\n    assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3\n\n    feeder.feedInput(input, 0, 1);\n    assertEquals(JsonToken.START_ARRAY, parser.nextToken());\n    assertEquals(2, parser.getCurrentLocation().getByteOffset());\n    assertEquals(2, parser.getTokenLocation().getByteOffset());\n  }\n}\n"
}