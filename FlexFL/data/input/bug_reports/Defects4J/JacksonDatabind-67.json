{
    "title": "Map key deserializerModifiers ignored",
    "description": "\nWe have a module that extends simple model to allow us to accept enum names in lower case in a fairly generic manner\nInside that we add the modifyKeyDeserializer\nThe incoming class (using immutables) is mapped to a guava immutable map.\nWalking through the code:\n\ncom.fasterxml.jackson.datatype.guava.deser.ImmutableMapDeserializer.createContextual\ncalls DeserializationContext.findKeyDeserializer\ncalls DeserializerCache.findKeyDeserializer\ncalls BasicDeserializerFactory.createKeyDeserializer\n\nwhich has the code:\n        // the only non-standard thing is this:\n        if (deser == null) {\n            if (type.isEnumType()) {\n                return _createEnumKeyDeserializer(ctxt, type);\n            }\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\nSince we are an enum type, it returns the value in the _createEnumKeyDeserializer, which is the standard enum deserializer.\nBelow that block is the check for the hasDeserializerModifiers, but since we have returned already, it is never called, so we can't override the behaviour.\nModule fragment:\n    setDeserializerModifier(new BeanDeserializerModifier() {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                public JsonDeserializer<Enum> modifyEnumDeserializer(\n                        DeserializationConfig config,\n                        final JavaType type,\n                        BeanDescription beanDesc,\n                        final JsonDeserializer<?> deserializer) {\n                    return new JsonDeserializer<Enum>() {\n                        @Override\n                        public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();\n                            return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());\n                        }\n                    };\n                }\n\n                @Override\n                public KeyDeserializer modifyKeyDeserializer(\n                        DeserializationConfig config,\n                        JavaType type,\n                        KeyDeserializer deserializer) {\n                    if (!type.isEnumType()) {\n                        return super.modifyKeyDeserializer(config, type, deserializer);\n                    }\n                    return new KeyDeserializer() {\n                        @Override\n                        @SuppressWarnings(\"unchecked\")\n                        public Object deserializeKey(String key, DeserializationContext ctxt)\n                                throws IOException, JsonProcessingException {\n                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();\n                            return Enum.valueOf(rawClass, key.toUpperCase());\n                        }\n                    };\n                }\n            });\nI appreciate the code around here is fairly complex.\nRelated issues (possibly):\n#749\n#1313\n"
}