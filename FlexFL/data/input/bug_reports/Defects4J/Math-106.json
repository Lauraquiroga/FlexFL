{
    "title": "[math] Function math.fraction.ProperFractionFormat.parse(String, ParsePosition) return illogical result",
    "description": "\n\nHello,\nI find illogical returned result from function \"Fraction parse(String source, \nParsePostion pos)\" (in class ProperFractionFormat of the Fraction Package) of \nthe Commons Math library. Please see the following code segment for more \ndetails:\n\"\nProperFractionFormat properFormat = new ProperFractionFormat();\nresult = null;\nString source = \"1 -1 / 2\";\nParsePosition pos = new ParsePosition(0);\n//Test 1 : fail \npublic void testParseNegative(){\n   String source = \"-1 -2 / 3\";\n   ParsePosition pos = new ParsePosition(0);\n   Fraction actual = properFormat.parse(source, pos);\n   assertNull(actual);\n}\n// Test2: success\npublic void testParseNegative(){\n   String source = \"-1 -2 / 3\";\n   ParsePosition pos = new ParsePosition(0);\n   Fraction actual = properFormat.parse(source, pos);  // return Fraction 1/3\n   assertEquals(1, source.getNumerator());\n   assertEquals(3, source.getDenominator());\n}\n\"\nNote: Similarly, when I passed in the following inputs: \n  input 2: (source = \u201c1 2 / -3\u201d, pos = 0)\n  input 3: ( source = \u201d -1 -2 / 3\u201d, pos = 0)\nFunction \"Fraction parse(String, ParsePosition)\" returned Fraction 1/3 (means \nthe result Fraction had numerator = 1 and  denominator = 3)for all 3 inputs \nabove.\nI think the function does not handle parsing the numberator/ denominator \nproperly incase input string provide invalid numerator/denominator. \nThank you!\n\n"
}