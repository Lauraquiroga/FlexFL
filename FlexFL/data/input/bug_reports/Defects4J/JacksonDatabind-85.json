{
    "title": "<code>DateTimeSerializerBase</code> ignores configured date format when creating contextual ",
    "description": "\nDateTimeSerializerBase#createContextual creates a new serializer with StdDateFormat.DATE_FORMAT_STR_ISO8601 format instead of re-using the actual format that may have been specified on the configuration. See the following code:\nfinal String pattern = format.hasPattern()\n                                    ? format.getPattern()\n                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n\nUsing the @JsonFormat annotation on a field will therefore reset the format to Jackson's default even if the annotation doesn't specify any custom format.\nDateBasedDeserializer#createContextual behaves differently and tries to re-use the configured format:\nDateFormat df = ctxt.getConfig().getDateFormat();\n// one shortcut: with our custom format, can simplify handling a bit\nif (df.getClass() == StdDateFormat.class) {\n   ...\n   StdDateFormat std = (StdDateFormat) df;\n   std = std.withTimeZone(tz);\n   ...\n} else {\n  // otherwise need to clone, re-set timezone:\n  df = (DateFormat) df.clone();\n  df.setTimeZone(tz);\n}\n\nShouldn't the serializer follow the same approach ?\n"
}