{
    "title": "Bug in Element.insertChildren()",
    "description": "\nWhen using org.jsoup.nodes.Element.insertChildren(int, Collection<? extends Node>) to move (more than one!) child-elements from one parent-element to the same parent, but different index then it produces wrong results.\nThe problem is that the first Element's 'move' leaves the siblingIndex unchanged and then the second 'move' removes a wrong element and produces some crap. Maybe calling reindexChildren() inside the loop in addChildren() fixes this.\nVersion 1.8.3.\nWorkaround: call remove() on the elements before passing them to insertChildren()\nEasy Test Case:\n    @Test\n    public void mustCorrectlyMoveChildrenInsideOneParentElement() {\n\n        Document doc = new Document( \"\" );\n        Element body = doc.appendElement( \"body\" );\n        body.appendElement( \"div1\" );\n        body.appendElement( \"div2\" );\n        Element div3 = body.appendElement( \"div3\" );\n        Element div4 = body.appendElement( \"div4\" );\n\n        ArrayList<Element> toMove = new ArrayList<Element>() {\n            {\n                add( div3 );\n                add( div4 );\n            }\n        };\n\n        body.insertChildren( 0, toMove );\n\n        String result = doc.toString().replaceAll( \"\\\\s+\", \"\" );\n        assertEquals( \"<body><div3></div3><div4></div4><div1></div1><div2></div2></body>\", result );\n\n    }\n\n"
}