{
    "title": "<code>Optional.empty()</code> not excluded if property declared with type <code>Object</code>",
    "description": "\nJackson version is 2.6.6\nHere is the code:\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);\n        mapper.registerModule(new Jdk8Module());\n\n        JsonResult result = new JsonResult();\n        result.setA(Optional.empty());\n        result.setB(Optional.empty());\n        System.out.println(mapper.writeValueAsString(result));\n\n@Data\npublic class JsonResult {\n    private Object a;\n    private Optional<Object> b;\n}\n\nThen I got the output: {\"a\":null}\nThe real value of both is the same, why the results are different?\nHow can I avoid null in such case?\nBy the way, I tried 'NON_EMPTY'. It can work, but it also ignores zero and empty array. I want to keep them.\n"
}