{
    "title": "Change of behavior (2.8 -&gt; 2.9) with <code>ObjectMapper.readTree(input)</code> with no content",
    "description": "\nSo, it looks like readTree() methods in ObjectMapper, ObjectReader that take input OTHER than JsonParser, and are given \"empty input\" (only white-space available before end), will\n\nReturn NullNode (Jackson 2.x up to and including 2.8)\nReturn null (Jackson 2.9)\n\nLatter behavior is what readTree(JsonParser) has and will do; but this accidentally changed other methods due to refactoring that unified underlying call handling (and add checking for new DeserializationFeature.FAIL_ON_TRAILING_TOKENS).\nBehavior for this edge case was not being tested, apparently.\nNow: since behavior has been changed for all 2.9.x patch versions, I am not sure it should be changed for 2.9 branch. But it seems sub-optimal as behavior, and something to definitely change for 3.0... but probably also for 2.10.\nThere are multiple things we could do.\n\nChange it back to 2.8, to return NullNode\nChange to throw exception, as \"not valid\" use case\nChange it to return MissingNode\nLeave as-is, for rest of 2.x.\n\nAlthough it might seem best to revert it to (1), that seems somewhat wrong, problematic, as it would now not be possible to distinguish between JSON null value and missing content.\nAnd although (2) would probably make sense, if designing API from scratch, it is probably too intrusive.\nSo I think (3) is the best way: it avoids returning null or throwing Exception (both being likely to break 2.9 code), but still allows distinguishing between all possible input cases.\n"
}