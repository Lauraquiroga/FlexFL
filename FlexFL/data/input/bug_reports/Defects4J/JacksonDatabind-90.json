{
    "title": "<code>ValueInstantiator.canInstantiate()</code> ignores <code>canCreateUsingArrayDelegate()</code>",
    "description": "\nProblem\nMethod Javadoc doesn't match behavior. As a result, delegate collection constructors (for abstract types) don't work properly.\nTested versions\njackson-databind v2.8.7 and v2.9.2.\nLocation in code\nhttps://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java#L70\nExpected Behavior\nOutputs [].\nObserved Behavior\nException in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `ArrayDelegateDeserializationTest$MyType` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information\n at [Source: (String)\"[]\"; line: 1, column: 1]\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1451)\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1027)\n\tat com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(AbstractDeserializer.java:265)\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4001)\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2992)\n\tat ArrayDelegateDeserializationTest.main(ArrayDelegateDeserializationTest.java:35)\n\nTest code\nimport java.util.List;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class ArrayDelegateDeserializationTest {\n\n    public static class MyTypeImpl implements MyType {\n        private final List<Integer> values;\n\n        MyTypeImpl(List<Integer> values) {\n            this.values = values;\n        }\n\n        @Override\n        public List<Integer> getValues() {\n            return values;\n        }\n    }\n\n    public interface MyType {\n        @JsonValue\n        List<Integer> getValues();\n\n        @JsonCreator\n        static MyType of(List<Integer> values) {\n            return new MyTypeImpl(values);\n        }\n    }\n\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        MyType thing = mapper.readValue(\"[]\", MyType.class);\n        System.out.println(thing.getValues());\n    }\n\n}\n"
}