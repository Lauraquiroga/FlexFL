{
    "title": "#141 Bug on withLaterOffsetAtOverlap method",
    "description": "\nThe method withLaterOffsetAtOverlap created to workaround the issue 3192457 seems to not be working at all.\nI won\u00b4t write many info about the problem to solve because the issue 3192457 have this info indeed.\nBut If something is unclear I can answer on the comments.\nProblem demonstration:\nTimeZone.setDefault(TimeZone.getTimeZone(\"America/Sao_Paulo\"));\nDateTimeZone.setDefault( DateTimeZone.forID(\"America/Sao_Paulo\") );\n    DateTime dtch;\n    {\n        dtch = new DateTime(2012,2,25,5,5,5,5).millisOfDay().withMaximumValue();\n        System.out.println( dtch ); // prints: 2012-02-25T23:59:59.999-02:00 //Were are at the first 23:** of the day.\n        //At this point dtch have the -03:00 offset\n    }\n    {\n        dtch = dtch.plus(60001);\n        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-03:00 //Were are at the first minute of the second 23:** of the day. Ok its correct\n        //At this point dtch have the -03:00 offset\n    }\n    {\n        dtch = dtch.withEarlierOffsetAtOverlap();\n        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:** of the day. Ok its correct\n        //At this point dtch have the -02:00 offset ( because we called withEarlierOffsetAtOverlap() ) // This method is working perfectly\n    }       \n    {\n        dtch = dtch.withLaterOffsetAtOverlap();\n        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:** of the day. \n        // Here is the problem we should have a -03:00 offset here since we called withLaterOffsetAtOverlap() expecting to change to the second 23:** of the day\n    }\n\nOn the last two brackets we can see that withLaterOffsetAtOverlap is not undoing withEarlierOffsetAtOverlap as it should ( and not even working at all )\n"
}