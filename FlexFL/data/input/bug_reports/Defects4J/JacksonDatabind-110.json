{
    "title": "Inconsistent handling of Collections$UnmodifiableList VS Collections$UnmodifiableRandomAccessList",
    "description": "\nI'm sorry to bring that one up again, but I'm under the impression that the issue about unmodifiable collections (#1880) is still not solved completely.\nIn fact, the way the CLASS_UNMODIFIABLE_LIST is retrieved here yields Collections$UnmodifiableRandomAccessList, and therefore only this type is currently supported by Jackson 2.9.8.\nHowever, using Collections.unmodifiableList() on a List implementation that doesn't implement RandomAccess will yield a Collections$UnmodifiableList instead, which is not deserialized properly and fails with:\ncom.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.util.Collections$UnmodifiableList` (no Creators, like default constructor, exist): no default no-arguments constructor found\n\nThis can be reproduced by adding the following test case in TestDefaultForUtilCollections1868:\npublic void testUnmodifiableNonRandomAccessList() throws Exception {\n   _verifyCollection(Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\"))));\n}\nOr more generally for outside the project:\npublic void testUnmodifiableNonRandomAccessList() throws Exception {\n    Collection<?> exp = Collections.unmodifiableList(new LinkedList<>(Arrays.asList(\"first\", \"second\")));\n    ObjectMapper mapper = new ObjectMapper();\n    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n    String json = mapper.writeValueAsString(exp);\n    Collection<?> act = mapper.readValue(json, Collection.class);\n\n    assertEquals(exp, act);\n    assertEquals(exp.getClass(), act.getClass());\n}\nCurrently java.util.Collections.unmodifiableList() can only return these 2 types of unmodifiable lists, so I believe it is safe for now to just hardcode yet another special case for this class.\nThis can currently be solved on user side by adding a mixin, but since Collections$UnmodifiableRandomAccessList is supported, I would find it natural to also support the non-random access variant.\n"
}