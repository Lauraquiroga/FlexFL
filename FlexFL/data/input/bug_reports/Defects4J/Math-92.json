{
    "title": "MathUtils.binomialCoefficient(n,k) fails for large results",
    "description": "\n\nProbably due to rounding errors, MathUtils.binomialCoefficient(n,k) fails for results near Long.MAX_VALUE.\nThe existence of failures can be demonstrated by testing the recursive property:\n\n         assertEquals(MathUtils.binomialCoefficient(65,32) + MathUtils.binomialCoefficient(65,33),\n                 MathUtils.binomialCoefficient(66,33));\n\n\nOr by directly using the (externally calculated and hopefully correct) expected value:\n\n         assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66,33));\n\n\nI suggest a nonrecursive test implementation along the lines of\nMathUtilsTest.java\n    /**\n     * Exact implementation using BigInteger and the explicit formula\n     * (n, k) == ((k-1)*...*n) / (1*...*(n-k))\n     */\n\tpublic static long binomialCoefficient(int n, int k) {\n\t\tif (k == 0 || k == n)\n\t\t\treturn 1;\n\t\tBigInteger result = BigInteger.ONE;\n\t\tfor (int i = k + 1; i <= n; i++) {\n\t\t\tresult = result.multiply(BigInteger.valueOf(i));\n\t\t}\n\t\tfor (int i = 1; i <= n - k; i++) {\n\t\t\tresult = result.divide(BigInteger.valueOf(i));\n\t\t}\n\t\tif (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {\n\t\t\tthrow new ArithmeticException(\n                                \"Binomial coefficient overflow: \" + n + \", \" + k);\n\t\t}\n\t\treturn result.longValue();\n\t}\n\n\nWhich would allow you to test the expected values directly:\n\n         assertEquals(binomialCoefficient(66,33), MathUtils.binomialCoefficient(66,33));\n\n\n\n"
}