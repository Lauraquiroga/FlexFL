{
    "title": "StringUtils replaceEach - Bug or Missing Documentation ",
    "description": "\n\nThe following Test Case for replaceEach fails with a null pointer exception.\nI have expected that all StringUtils methods are \"null-friendly\"\nThe use case is that i will stuff Values into the replacementList of which I do not want to check whether they are null.\nI admit the use case is not perfect, because it is unclear what happens on the replace.\nI outlined three expectations in the test case, of course only one should be met.\nIf it is decided that none of them should be possible, I propose to update the documentation with what happens when null is passed as replacement string\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.junit.Test;\n\n\npublic class StringUtilsTest {\n\n\t@Test\n\tpublic void replaceEach(){\n\t\tString original = \"Hello World!\";\n\t\tString[] searchList = {\"Hello\", \"World\"};\n\t\tString[] replacementList = {\"Greetings\", null};\n\t\tString result = StringUtils.replaceEach(original, searchList, replacementList);\n\t\tassertEquals(\"Greetings !\", result);\n\t\t//perhaps this is ok as well\n                //assertEquals(\"Greetings World!\", result);\n                //or even\n\t\t//assertEquals(\"Greetings null!\", result);\n\t}\n\n\t\n}\n\n\n\n"
}