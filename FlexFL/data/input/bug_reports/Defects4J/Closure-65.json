{
    "title": "String escaping mishandles null byte",
    "description": "What steps will reproduce the problem?\n1. Run:\r\nvar x = \"\\u00003\"; if (x.length < 2) { alert(\"fail\"); } else { alert(\"win\"); }\r\n2. Compile and run\r\n\r\nWhat is the expected output? What do you see instead?\n\"win\" is expected. \"fail\" is observed\r\n\r\nWhat version of the product are you using? On what operating system?\nr1167 on OS x 10.6\r\n\r\nPlease provide any additional information below.\nThe problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015\r\n\r\nHere's a patch that fixes it:\r\n$ svn diff\r\nIndex: src/com/google/javascript/jscomp/CodeGenerator.java\r\n===================================================================\r\n--- src/com/google/javascript/jscomp/CodeGenerator.java\t(revision 1167)\r\n+++ src/com/google/javascript/jscomp/CodeGenerator.java\t(working copy)\r\n@@ -1012,7 +1012,7 @@\r\n     for (int i = 0; i < s.length(); i++) {\r\n       char c = s.charAt(i);\r\n       switch (c) {\r\n-        case '\\0': sb.append(\"\\\\0\"); break;\r\n+        case '\\0': sb.append(\"\\\\000\"); break;\r\n         case '\\n': sb.append(\"\\\\n\"); break;\r\n         case '\\r': sb.append(\"\\\\r\"); break;\r\n         case '\\t': sb.append(\"\\\\t\"); break;\r\n\r\nYou could also lookahead and output \"\\\\000\" only if the following char is 0-7 (octal valid) and otherwise output \"\\\\0\". Is 2 bytes worth the complexity?"
}