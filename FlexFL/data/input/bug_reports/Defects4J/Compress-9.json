{
    "title": "TarArchiveOutputStream.getBytesWritten() returns invalid value",
    "description": "\n\nIt appears the TarArchiveOutputStream.getBytesWritten()returns zero or invalid value when queried.\nIn the code sample below, it returns zero, even after an sizeable file was processed.\nI've printed it twice, once before closing the output stream, and once after, just for the reference.\nIt is also demonstrable on multiple processed files.\nWithin the TarArchiveOutputStream.getBytesWritten() implementation, it appears the call for count(numToWrite) is made after the numToWrite is depleted in the process of actual byte writing. When call for count(numToWrite); is moved up, the returned values for TarArchiveOutputStream.getBytesWritten() are getting equal to the sum of the sizes of processed files. This is much closer to expected value (\"Returns the current number of bytes written to this stream.\") but still not correct, for that number should include the tar header sizes as well.\nAt any rate, please find the proposed patch below, merely moving count(numToWrite); up a few lines. This makes TarArchiveOutputStream.getBytesWritten() closer to true value.\nTest code:\n\n@Test\n\tpublic void tartest() throws Exception {\n\t\t\n\t\tFileOutputStream myOutputStream = new FileOutputStream(\"C:/temp/tartest.tar\");\n\t\t\n\t\tArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);\n\t\t\n\t\tFile sSource = new File(\"C:/share/od_l.txt\");\n\t\tTarArchiveEntry sEntry = new TarArchiveEntry(sSource);\n\t\tsTarOut.putArchiveEntry(sEntry);\n\t\t\n\t\tFileInputStream sInput = new FileInputStream(sSource);\n\t\tbyte[] cpRead = new byte[8192];\n\t\t\n\t\tint iRead = 0;\n\t\twhile ((iRead = sInput.read(cpRead)) > 0) {\n\t\t\tsTarOut.write(cpRead, 0, iRead);\n\t\t}\n\t\t\n\t\tsLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());\n\t\t\n\t\tsInput.close();\n\t\tsTarOut.closeArchiveEntry();\n\t\tsTarOut.close();\n\n\t\tsLog.info(\"Processed: \"+sTarOut.getBytesWritten()+\" bytes. File Len: \"+sSource.length());\n\n\t\t\n\t\treturn;\n\t\t\t\n\t}\n\n\nTest Output:\n\nOct 21, 2011 9:09:28 AM com.cronsult.jndmpd.test.Backup tartest\nINFO: Processed: 0 bytes. File Len: 186974208\nOct 21, 2011 9:09:28 AM com.cronsult.jndmpd.test.Backup tartest\nINFO: Processed: 0 bytes. File Len: 186974208\n\n\nProposed Patch:\n\nIndex: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n===================================================================\n--- src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t(revision 1187150)\n+++ src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\t(working copy)\n@@ -276,6 +276,8 @@\n             // eliminate some of the buffer copying.\n             //\n         }\n+        \n+        count(numToWrite);\n \n         if (assemLen > 0) {\n             if ((assemLen + numToWrite) >= recordBuf.length) {\n@@ -325,7 +327,7 @@\n             wOffset += num;\n         }\n         \n-        count(numToWrite);\n+        \n     }\n \n     /**\n\n\n\n\n"
}