{
    "title": "#60 .withHourOfDay() sets hour inconsistantly on DST transition.",
    "description": "\nWhen the hour of day is set to the ambiguous hour on the daylight to\nstandard time transition in a given time zone the result is inconsistent for different time zones. Shoul the hour be set to the\ndaylight hour or the standard hour for all time zones? I can't find anything\nthat documents this behavior.\nMy test code below returns different results for different time zones.\n/\n Verify Joda converts the hour of day the same for regions north and\nsouth of the equator on the DST daylight to standard time transition.\n*/\n@Test\npublic void jodaTest ()\n{\nChronology chronUTC =\nGregorianChronology.getInstance(DateTimeZone.UTC);\nDateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0,\n0, chronUTC);\nDateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0,\n0, chronUTC);\nChronology chronUSCentral =\nGregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\nAssert.assertTrue(\"Should be standard time\",\nchronUSCentral.getZone().isStandardOffset(\nusCentralStandardInUTC.getMillis()));\nAssert.assertFalse(\"Should be daylight time\",\nchronUSCentral.getZone().isStandardOffset(\nusCentralDaylightInUTC.getMillis()));\nDateTime usCentralStandardInUSCentral =\nusCentralStandardInUTC.toDateTime(chronUSCentral);\nDateTime usCentralDaylightInUSCentral =\nusCentralDaylightInUTC.toDateTime(chronUSCentral);\nassertEquals(1, usCentralStandardInUSCentral.getHourOfDay());\nassertEquals(usCentralStandardInUSCentral.getHourOfDay(),\nusCentralDaylightInUSCentral.getHourOfDay());\nAssert.assertTrue(usCentralStandardInUSCentral.getMillis() !=\nusCentralDaylightInUSCentral.getMillis());\nDateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0,\n0, 0, chronUTC);\nDateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0,\n0, 0, chronUTC);\nChronology chronAusNSW =\nGregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\nAssert.assertTrue(\"Should be standard time\",\nchronAusNSW.getZone().isStandardOffset(\naustraliaNSWStandardInUTC.getMillis()));\nAssert.assertFalse(\"Should be daylight time\",\nchronAusNSW.getZone().isStandardOffset(\naustraliaNSWDaylightInUTC.getMillis()));\nDateTime australiaNSWStandardInAustraliaNSW =\naustraliaNSWStandardInUTC.toDateTime(chronAusNSW);\nDateTime australiaNSWDaylightInAusraliaNSW =\naustraliaNSWDaylightInUTC.toDateTime(chronAusNSW);\nassertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\nassertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(),\naustraliaNSWDaylightInAusraliaNSW.getHourOfDay());\nAssert.assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() !=\naustraliaNSWDaylightInAusraliaNSW.getMillis());\n// Verify that setting the hour of day on the DST boundary results\nin a daylight time for\n// both time zones.\nassertEquals(usCentralDaylightInUSCentral,\nusCentralStandardInUSCentral.withHourOfDay(1));\nassertEquals(australiaNSWDaylightInAusraliaNSW,\naustraliaNSWStandardInAustraliaNSW.withHourOfDay(2));\n}\nThe very last assertion fails on the Australia time zone cutover.\njava.lang.AssertionError: expected:<2008-04-06T02:00:00.000+11:00> but\nwas:<2008-04-06T02:00:00.000+10:00>\n"
}