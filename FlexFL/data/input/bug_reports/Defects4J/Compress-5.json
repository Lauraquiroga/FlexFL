{
    "title": "ZipArchiveInputStream doesn't report the end of a truncated archive",
    "description": "\n\nIf a Zip archive is truncated, (e.g. because it is the first volume in a multi-volume archive) the ZipArchiveInputStream.read() method will not detect that fact. All calls to read() will return 0 bytes read. They will not return -1 (end of stream), nor will they throw any exception (which would seem like a good idea to me because the archive is truncated).\nI have tracked this problem to ZipArchiveInputStream.java, line 239. It contains a check\nif (read == 0 && inf.finished()) {\n    return -1;\n}\nFor truncated archives the read is always zero but the inf is never finished(). I suggest adding two lines below:\nif (read == 0 && inf.finished()) {\n    return -1;\n} else if (read == 0 && lengthOfLastRead == -1) {\n\tthrow new IOException(\"Truncated ZIP file\");\n}\nThis solves the problem in my tests.\n\n"
}