{
    "title": "Failure with custom Enum key deserializer, polymorphic types",
    "description": "\nNormally the JsonParser and the DeserializationContext is passed to a Module's JsonDeserializer.\nHowever, in the MapDeserializer, when deserializing a Map with an Enum key, the KeyDeserializer doesn't accept the JsonParser as an argument:\nhttps://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java#L453\nObject key = keyDes.deserializeKey(keyStr, ctxt);\nand the StdKeyDeserializer.DelegatingKD uses the context's parser\nhttps://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java#L315\nObject result = _delegate.deserialize(ctxt.getParser(), ctxt);\nWhen the type info field is missing from the json, the DeserializationContext's JsonParser's token is END_OBJECT (presumably because it nextToken'd through the object to find type and whiffed).\nThis makes the module fail since the JsonParser in the Module is wrong, i.e. not the same as the JsonParser in the MapDeserializer.\nClass:\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\n\nimport java.util.Map;\n\nimport static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;\n\n@JsonTypeInfo(use = NAME, property = \"@type\", defaultImpl = SuperType.class)\npublic class SuperType {\n    private Map<SuperTypeEnum, String> someMap;\n\n    public Map<SuperTypeEnum, String> getSomeMap() {\n        return someMap;\n    }\n\n    public void setSomeMap(Map<SuperTypeEnum, String> someMap) {\n        this.someMap = someMap;\n    }\n}\n\nEnum:\npublic enum SuperTypeEnum {\n    FOO\n}\n\nTest:\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport org.junit.*;\n\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestDeserializeType {\n\n    @Test\n    public void testNoTypeShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n\n    @Test\n    public void testNoTypeWithModuleShouldDeserialize() throws IOException {\n        String json = \"{\\\"someMap\\\": {\\\"FOO\\\": \\\"bar\\\"}}\";\n        ObjectMapper mapper = new ObjectMapper();\n        SimpleModule simpleModule = new SimpleModule();\n        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {\n            @Override\n            public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n                    throws IOException {\n\n                return SuperTypeEnum.valueOf(jsonParser.getText());\n            }\n        });\n        mapper.registerModule(simpleModule);\n\n        SuperType superType = mapper.readValue(json, SuperType.class);\n        assertEquals(\"Deserialized someMap.FOO should equal bar\", \"bar\", superType.getSomeMap().get(SuperTypeEnum.FOO));\n    }\n}\n\n"
}