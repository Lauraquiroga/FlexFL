{
    "title": "Assignments within conditions are sometimes incorrectly removed",
    "description": "What steps will reproduce the problem?\n\r\n1. See attachment.\r\n2. Run original.\r\n3. Run compiled.\r\n\r\n\r\nWhat is the expected output? What do you see instead?\n\r\n* Both should return \"true\"\r\n* Original does return \"true\"\r\n* Compiled returns \"undefined\"\r\n\r\n\r\nWhat version of the product are you using? On what operating system?\n\r\nClosure Compiler (http://code.google.com/closure/compiler)\r\nVersion: 706\r\nBuilt on: 2011/01/19 19:53\r\n\r\nMac OS X 10.6\r\n\r\nPlease provide any additional information below.\n\r\nIn the attached reduction if the \"echo\" functions aren't used then the entire body of the function is compiled away, they are there to demonstrate that the first assignment in the condition is removed.\r\n\r\n\r\nOriginal:\r\n\r\nfunction reduction()\r\n{\r\n    var a, b;\r\n    if (echo(b = true) || echo(b = false))\r\n        a = b;\r\n    else\r\n        a = null;\r\n    return a;\r\n}\r\n\r\n\r\nCompiled:\r\n\r\nfunction reduction() {\r\n    var a;\r\n    return echo(true) || echo(a = false) ? a: null\r\n}"
}