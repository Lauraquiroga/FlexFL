{
    "title": "@JsonIdentityReference not used when setup on class only",
    "description": "\nI am trying to setup @JsonIdentityInfo/@JsonIdentityReference in order to serialize all references to a given class as Object Id (and deserialize them later using a custom ObjectIdResolver to retrieve the proper referenced instance)\nI use @JsonIdentityReference(alwaysAsId=true) in order to enforce exporting the object id in all cases.\nIt does not work as expected when I define the annotation only on the class (but it works fine when I set it directly on the property). I would rather not have to define it on every property as I will probably miss some...\nFrom what I see in BeanSerializerBase, the alwaysAsId is reset when not ObjectIdInfo is found on the accessor:\n            ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor);\n            if (objectIdInfo == null) {\n                // no ObjectId override, but maybe ObjectIdRef?\n                if (oiw != null) {\n                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\noiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\nShouldn't it be kept to the current value when no override is found ?\nI tried to set it back in the default ObjectIdInfo created with NAME_FOR_OBJECT_REF but I am not sure if this is the right way to fix this.\nHere is test I added in TestObjectIdSerialization for this case:\n    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n    @JsonIdentityReference(alwaysAsId=true)\n    static class ReallyAlwaysAsId\n    {\n        public int value;\n\n        public ReallyAlwaysAsId() { this(0); }\n        public ReallyAlwaysAsId(int v) {\n            value = v;\n        }\n    }\n\n    @JsonPropertyOrder(alphabetic=true)\n    static class ReallyAlwaysContainer\n    {\n\n        @JsonIdentityReference(alwaysAsId=true)\n        public AlwaysAsId a = new AlwaysAsId(13);\n\n        public ReallyAlwaysAsId b = new ReallyAlwaysAsId(13);\n\n    }\n\n    public void testReallyAlwaysAsId() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());\n        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);\n    }\n"
}